; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27050.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_R2mmc1_rom@@8				; mmc1_rom::`RTTI Base Class Array'
PUBLIC	??_R2rom@@8					; rom::`RTTI Base Class Array'
PUBLIC	??_R2mmc1_vrom@@8				; mmc1_vrom::`RTTI Base Class Array'
PUBLIC	??_R2vrom@@8					; vrom::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@mmc1_rom@@8			; mmc1_rom::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@rom@@8				; rom::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@mmc1_vrom@@8			; mmc1_vrom::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@vrom@@8				; vrom::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3rom@@8					; rom::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVrom@@@8					; rom `RTTI Type Descriptor'
PUBLIC	??_R3mmc1_rom@@8				; mmc1_rom::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVmmc1_rom@@@8				; mmc1_rom `RTTI Type Descriptor'
PUBLIC	??_R3vrom@@8					; vrom::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVvrom@@@8				; vrom `RTTI Type Descriptor'
PUBLIC	??_R3mmc1_vrom@@8				; mmc1_vrom::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVmmc1_vrom@@@8				; mmc1_vrom `RTTI Type Descriptor'
PUBLIC	??_R4mmc1_rom@@6B@				; mmc1_rom::`RTTI Complete Object Locator'
PUBLIC	??_R4mmc1_vrom@@6B@				; mmc1_vrom::`RTTI Complete Object Locator'
PUBLIC	??_7mmc1_vrom@@6B@				; mmc1_vrom::`vftable'
PUBLIC	??_7mmc1_rom@@6B@				; mmc1_rom::`vftable'
PUBLIC	??_C@_0BJ@HNFFBHJH@Denver?5MMC1?5?$CImapper?5001?$CJ@ ; `string'
PUBLIC	??_C@_0CA@OFOMHLKA@Denver?5MMC1?5?$CImapper?5001?$CJ?5?9?5VROM@ ; `string'
;	COMDAT ??_C@_0CA@OFOMHLKA@Denver?5MMC1?5?$CImapper?5001?$CJ?5?9?5VROM@
CONST	SEGMENT
??_C@_0CA@OFOMHLKA@Denver?5MMC1?5?$CImapper?5001?$CJ?5?9?5VROM@ DB 'Denve'
	DB	'r MMC1 (mapper 001) - VROM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HNFFBHJH@Denver?5MMC1?5?$CImapper?5001?$CJ@
CONST	SEGMENT
??_C@_0BJ@HNFFBHJH@Denver?5MMC1?5?$CImapper?5001?$CJ@ DB 'Denver MMC1 (ma'
	DB	'pper 001)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_7mmc1_rom@@6B@
CONST	SEGMENT
??_7mmc1_rom@@6B@ DQ FLAT:??_R4mmc1_rom@@6B@		; mmc1_rom::`vftable'
	DQ	FLAT:?rundevice@device@@UEAAHH@Z
	DQ	FLAT:?dma@device@@UEAAXPEAE_N1@Z
	DQ	FLAT:??_Emmc1_rom@@UEAAPEAXI@Z
	DQ	FLAT:?write@mmc1_rom@@UEAAXHHE@Z
	DQ	FLAT:?read@mmc1_rom@@UEAAEHH@Z
	DQ	FLAT:?set_rom_data@mmc1_rom@@UEAAXPEAE_K@Z
CONST	ENDS
;	COMDAT ??_7mmc1_vrom@@6B@
CONST	SEGMENT
??_7mmc1_vrom@@6B@ DQ FLAT:??_R4mmc1_vrom@@6B@		; mmc1_vrom::`vftable'
	DQ	FLAT:?rundevice@device@@UEAAHH@Z
	DQ	FLAT:?dma@device@@UEAAXPEAE_N1@Z
	DQ	FLAT:??_Emmc1_vrom@@UEAAPEAXI@Z
	DQ	FLAT:?write@mmc1_vrom@@UEAAXHHE@Z
	DQ	FLAT:?read@mmc1_vrom@@UEAAEHH@Z
	DQ	FLAT:?set_rom_data@mmc1_vrom@@UEAAXPEAE_K@Z
CONST	ENDS
;	COMDAT ??_R4mmc1_vrom@@6B@
rdata$r	SEGMENT
??_R4mmc1_vrom@@6B@ DD 01H				; mmc1_vrom::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVmmc1_vrom@@@8
	DD	imagerel ??_R3mmc1_vrom@@8
	DD	imagerel ??_R4mmc1_vrom@@6B@
rdata$r	ENDS
;	COMDAT ??_R4mmc1_rom@@6B@
rdata$r	SEGMENT
??_R4mmc1_rom@@6B@ DD 01H				; mmc1_rom::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVmmc1_rom@@@8
	DD	imagerel ??_R3mmc1_rom@@8
	DD	imagerel ??_R4mmc1_rom@@6B@
rdata$r	ENDS
;	COMDAT ??_R0?AVmmc1_vrom@@@8
data$r	SEGMENT
??_R0?AVmmc1_vrom@@@8 DQ FLAT:??_7type_info@@6B@	; mmc1_vrom `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVmmc1_vrom@@', 00H
data$r	ENDS
;	COMDAT ??_R3mmc1_vrom@@8
rdata$r	SEGMENT
??_R3mmc1_vrom@@8 DD 00H				; mmc1_vrom::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	imagerel ??_R2mmc1_vrom@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVvrom@@@8
data$r	SEGMENT
??_R0?AVvrom@@@8 DQ FLAT:??_7type_info@@6B@		; vrom `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVvrom@@', 00H
data$r	ENDS
;	COMDAT ??_R3vrom@@8
rdata$r	SEGMENT
??_R3vrom@@8 DD	00H					; vrom::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2vrom@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVmmc1_rom@@@8
data$r	SEGMENT
??_R0?AVmmc1_rom@@@8 DQ FLAT:??_7type_info@@6B@		; mmc1_rom `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVmmc1_rom@@', 00H
data$r	ENDS
;	COMDAT ??_R3mmc1_rom@@8
rdata$r	SEGMENT
??_R3mmc1_rom@@8 DD 00H					; mmc1_rom::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	imagerel ??_R2mmc1_rom@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVrom@@@8
data$r	SEGMENT
??_R0?AVrom@@@8 DQ FLAT:??_7type_info@@6B@		; rom `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVrom@@', 00H
data$r	ENDS
;	COMDAT ??_R3rom@@8
rdata$r	SEGMENT
??_R3rom@@8 DD	00H					; rom::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2rom@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@vrom@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@vrom@@8 DD imagerel ??_R0?AVvrom@@@8	; vrom::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3vrom@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@mmc1_vrom@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@mmc1_vrom@@8 DD imagerel ??_R0?AVmmc1_vrom@@@8 ; mmc1_vrom::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3mmc1_vrom@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@rom@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@rom@@8 DD imagerel ??_R0?AVrom@@@8	; rom::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3rom@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@mmc1_rom@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@mmc1_rom@@8 DD imagerel ??_R0?AVmmc1_rom@@@8 ; mmc1_rom::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3mmc1_rom@@8
rdata$r	ENDS
;	COMDAT ??_R2vrom@@8
rdata$r	SEGMENT
??_R2vrom@@8 DD	imagerel ??_R1A@?0A@EA@vrom@@8		; vrom::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@bus_device@@8
	DD	imagerel ??_R1A@?0A@EA@device@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R2mmc1_vrom@@8
rdata$r	SEGMENT
??_R2mmc1_vrom@@8 DD imagerel ??_R1A@?0A@EA@mmc1_vrom@@8 ; mmc1_vrom::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@vrom@@8
	DD	imagerel ??_R1A@?0A@EA@bus_device@@8
	DD	imagerel ??_R1A@?0A@EA@device@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R2rom@@8
rdata$r	SEGMENT
??_R2rom@@8 DD	imagerel ??_R1A@?0A@EA@rom@@8		; rom::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@bus_device@@8
	DD	imagerel ??_R1A@?0A@EA@device@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R2mmc1_rom@@8
rdata$r	SEGMENT
??_R2mmc1_rom@@8 DD imagerel ??_R1A@?0A@EA@mmc1_rom@@8	; mmc1_rom::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@rom@@8
	DD	imagerel ??_R1A@?0A@EA@bus_device@@8
	DD	imagerel ??_R1A@?0A@EA@device@@8
	ORG $+3
PUBLIC	?update_banks@mmc1_vrom@@QEAAXAEAUmmc1_state@@@Z ; mmc1_vrom::update_banks
PUBLIC	?set_rom_data@mmc1_vrom@@UEAAXPEAE_K@Z		; mmc1_vrom::set_rom_data
PUBLIC	?write@mmc1_vrom@@UEAAXHHE@Z			; mmc1_vrom::write
PUBLIC	?read@mmc1_vrom@@UEAAEHH@Z			; mmc1_vrom::read
PUBLIC	??1mmc1_vrom@@UEAA@XZ				; mmc1_vrom::~mmc1_vrom
PUBLIC	??_Gmmc1_vrom@@UEAAPEAXI@Z			; mmc1_vrom::`scalar deleting destructor'
PUBLIC	?set_rom_data@mmc1_rom@@UEAAXPEAE_K@Z		; mmc1_rom::set_rom_data
PUBLIC	?write@mmc1_rom@@UEAAXHHE@Z			; mmc1_rom::write
PUBLIC	?update_banks@mmc1_rom@@QEAAXXZ			; mmc1_rom::update_banks
PUBLIC	?update_control@mmc1_rom@@QEAAXXZ		; mmc1_rom::update_control
PUBLIC	?read@mmc1_rom@@UEAAEHH@Z			; mmc1_rom::read
PUBLIC	??1mmc1_rom@@UEAA@XZ				; mmc1_rom::~mmc1_rom
PUBLIC	??_Gmmc1_rom@@UEAAPEAXI@Z			; mmc1_rom::`scalar deleting destructor'
EXTRN	??_Emmc1_vrom@@UEAAPEAXI@Z:PROC			; mmc1_vrom::`vector deleting destructor'
EXTRN	??_Emmc1_rom@@UEAAPEAXI@Z:PROC			; mmc1_rom::`vector deleting destructor'
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1mmc1_vrom@@UEAA@XZ DD imagerel $LN13
	DD	imagerel $LN13+55
	DD	imagerel $unwind$??1mmc1_vrom@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gmmc1_vrom@@UEAAPEAXI@Z DD imagerel $LN18
	DD	imagerel $LN18+87
	DD	imagerel $unwind$??_Gmmc1_vrom@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?write@mmc1_rom@@UEAAXHHE@Z DD imagerel $LN17
	DD	imagerel $LN17+230
	DD	imagerel $unwind$?write@mmc1_rom@@UEAAXHHE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1mmc1_rom@@UEAA@XZ DD imagerel $LN13
	DD	imagerel $LN13+55
	DD	imagerel $unwind$??1mmc1_rom@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gmmc1_rom@@UEAAPEAXI@Z DD imagerel $LN18
	DD	imagerel $LN18+87
	DD	imagerel $unwind$??_Gmmc1_rom@@UEAAPEAXI@Z
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gmmc1_rom@@UEAAPEAXI@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1mmc1_rom@@UEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?write@mmc1_rom@@UEAAXHHE@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gmmc1_vrom@@UEAAPEAXI@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1mmc1_vrom@@UEAA@XZ DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp
;	COMDAT ??_Gmmc1_rom@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gmmc1_rom@@UEAAPEAXI@Z PROC				; mmc1_rom::`scalar deleting destructor', COMDAT
$LN18:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp

; 14   : mmc1_rom::~mmc1_rom() {

	lea	rax, OFFSET FLAT:??_7mmc1_rom@@6B@
	mov	rdi, rcx
	mov	QWORD PTR [rcx], rax
	mov	ebx, edx

; 15   : 	free(mmc1ram);

	mov	rcx, QWORD PTR [rcx+112]
	call	QWORD PTR __imp_free
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp

; 186  : 	free(devicedescriptor);	// be done with it.

	mov	rcx, QWORD PTR [rdi+8]
	lea	rax, OFFSET FLAT:??_7device@@6B@
	mov	QWORD PTR [rdi], rax
	call	QWORD PTR __imp_free
	test	bl, 1
	je	SHORT $LN15@scalar
	mov	edx, 136				; 00000088H
	mov	rcx, rdi
	call	??3@YAXPEAX_K@Z				; operator delete
$LN15@scalar:
	mov	rbx, QWORD PTR [rsp+48]
	mov	rax, rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gmmc1_rom@@UEAAPEAXI@Z ENDP				; mmc1_rom::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp
;	COMDAT ??1mmc1_rom@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1mmc1_rom@@UEAA@XZ PROC				; mmc1_rom::~mmc1_rom, COMDAT

; 14   : mmc1_rom::~mmc1_rom() {

$LN13:
	push	rbx
	sub	rsp, 32					; 00000020H
	lea	rax, OFFSET FLAT:??_7mmc1_rom@@6B@
	mov	rbx, rcx
	mov	QWORD PTR [rcx], rax

; 15   : 	free(mmc1ram);

	mov	rcx, QWORD PTR [rcx+112]
	call	QWORD PTR __imp_free
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp

; 186  : 	free(devicedescriptor);	// be done with it.

	mov	rcx, QWORD PTR [rbx+8]
	lea	rax, OFFSET FLAT:??_7device@@6B@
	mov	QWORD PTR [rbx], rax
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp

; 16   : }

	add	rsp, 32					; 00000020H
	pop	rbx
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp

; 186  : 	free(devicedescriptor);	// be done with it.

	rex_jmp	QWORD PTR __imp_free
??1mmc1_rom@@UEAA@XZ ENDP				; mmc1_rom::~mmc1_rom
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp
;	COMDAT ?read@mmc1_rom@@UEAAEHH@Z
_TEXT	SEGMENT
this$ = 8
addr$ = 16
addr_from_base$ = 24
?read@mmc1_rom@@UEAAEHH@Z PROC				; mmc1_rom::read, COMDAT

; 20   : 	if ((addr >= 0x6000) && (addr <= 0x7FFF)) return mmc1ram[addr - 0x6000];

	lea	eax, DWORD PTR [rdx-24576]
	movsxd	r9, edx
	mov	r8, rcx
	cmp	eax, 8191				; 00001fffH
	ja	SHORT $LN2@read
	mov	rax, QWORD PTR [rcx+112]
	movzx	eax, BYTE PTR [rax+r9-24576]

; 23   : }

	ret	0
$LN2@read:

; 21   : 	if ((addr >= 0x8000) && (addr <= 0xBFFF)) return prg8000[addr - 0x8000];

	lea	ecx, DWORD PTR [rdx-32768]
	cmp	ecx, 16383				; 00003fffH
	ja	SHORT $LN3@read
	mov	rax, QWORD PTR [r8+120]
	movzx	eax, BYTE PTR [rax+r9-32768]

; 23   : }

	ret	0
$LN3@read:

; 22   : 	return prgC000[addr - 0xC000];

	mov	rax, QWORD PTR [r8+128]
	movzx	eax, BYTE PTR [rax+r9-49152]

; 23   : }

	ret	0
?read@mmc1_rom@@UEAAEHH@Z ENDP				; mmc1_rom::read
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp
;	COMDAT ?update_control@mmc1_rom@@QEAAXXZ
_TEXT	SEGMENT
this$ = 8
?update_control@mmc1_rom@@QEAAXXZ PROC			; mmc1_rom::update_control, COMDAT

; 26   : 	// parse control register.
; 27   : 	state.mirroring = state.control & 0x03;

	movzx	edx, BYTE PTR [rcx+99]
	movzx	eax, dl
	and	al, 3
	mov	BYTE PTR [rcx+100], al

; 28   : 	state.prg_bank_mode = (state.control & 0x0C) >> 2;

	movzx	eax, dl
	shr	al, 2

; 29   : 	state.chr_bank_mode = (state.control & 0x10) >> 4;

	shr	dl, 4
	and	al, 3
	and	dl, 1
	mov	BYTE PTR [rcx+101], al
	mov	BYTE PTR [rcx+102], dl

; 30   : }

	ret	0
?update_control@mmc1_rom@@QEAAXXZ ENDP			; mmc1_rom::update_control
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp
;	COMDAT ?update_banks@mmc1_rom@@QEAAXXZ
_TEXT	SEGMENT
this$ = 8
?update_banks@mmc1_rom@@QEAAXXZ PROC			; mmc1_rom::update_banks, COMDAT

; 33   : 	int		bank = 0;
; 34   : 	switch (state.prg_bank_mode) {

	movzx	eax, BYTE PTR [rcx+101]
	mov	r8, rcx
	cmp	al, 1
	jbe	SHORT $LN4@update_ban
	cmp	al, 2
	je	SHORT $LN5@update_ban
	cmp	al, 3
	jne	SHORT $LN2@update_ban

; 46   : 	case MMC1_PRG_LASTBANK_FIX_C000:
; 47   : 		bank = state.prgbank;
; 48   : 		prg8000 = &romdata[bank << 14];

	movzx	eax, BYTE PTR [rcx+105]
	shl	rax, 14
	add	rax, QWORD PTR [rcx+72]
	mov	QWORD PTR [rcx+120], rax

; 49   : 		prgC000 = &romdata[romsize - 0x4000];

	mov	eax, DWORD PTR [rcx+80]
	sub	eax, 16384				; 00004000H
	cdqe
	add	rax, QWORD PTR [rcx+72]
	mov	QWORD PTR [rcx+128], rax
	jmp	SHORT $LN2@update_ban
$LN5@update_ban:

; 40   : 		break;
; 41   : 	case MMC1_PRG_FIRSTBANK_FIX_8000:
; 42   : 		bank = state.prgbank;
; 43   : 		prg8000 = &romdata[0];

	mov	rcx, QWORD PTR [rcx+72]

; 44   : 		prgC000 = &romdata[bank << 14];

	movzx	eax, BYTE PTR [r8+105]
	shl	rax, 14
	add	rax, rcx
	mov	QWORD PTR [r8+120], rcx
	mov	QWORD PTR [r8+128], rax

; 45   : 		break;

	jmp	SHORT $LN2@update_ban
$LN4@update_ban:

; 35   : 	case MMC1_PRG_32K_MODE:
; 36   : 	case MMC1_PRG_32K_MODE2:
; 37   : 		bank = state.prgbank >> 1;

	movzx	eax, BYTE PTR [rcx+105]

; 38   : 		prg8000 = &romdata[bank << 15];

	mov	rcx, QWORD PTR [rcx+72]
	shr	eax, 1
	shl	eax, 15
	mov	edx, eax
	add	rax, rcx

; 39   : 		prgC000 = &romdata[bank << 15 | 0x4000];

	bts	rdx, 14
	mov	QWORD PTR [r8+120], rax
	add	rdx, rcx
	mov	QWORD PTR [r8+128], rdx
$LN2@update_ban:

; 50   : 		break;
; 51   : 	}
; 52   : 	// update linked vrom too.
; 53   : 	if (charrom) charrom->update_banks(state);

	mov	r9, QWORD PTR [r8+88]
	test	r9, r9
	je	$LN12@update_ban

; 152  : 	if (ppubus) {

	mov	rdx, QWORD PTR [r9+72]
	test	rdx, rdx
	je	$LN10@update_ban

; 153  : 		switch (state.mirroring) {

	movzx	ecx, BYTE PTR [r8+100]
	test	ecx, ecx
	je	$LN15@update_ban
	sub	ecx, 1
	je	SHORT $LN16@update_ban
	sub	ecx, 1
	je	SHORT $LN17@update_ban
	cmp	ecx, 1
	jne	$LN10@update_ban
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp

; 154  : 	for (int i = 0; i < 16; i++) pinout.pins[i] = i;

	xor	eax, eax
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp

; 168  : 			ppubus->resetpins_to_default();

	lea	rcx, QWORD PTR [rdx+56]
	npad	4
$LL49@update_ban:
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp

; 154  : 	for (int i = 0; i < 16; i++) pinout.pins[i] = i;

	mov	BYTE PTR [rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	inc	eax
	cmp	eax, 16
	jl	SHORT $LL49@update_ban

; 155  : 	processlayout = false;

	mov	BYTE PTR [rdx+40], 0
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp

; 169  : 			ppubus->swappins(10, 11);

	mov	rdx, QWORD PTR [r9+72]
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp

; 148  : 	pinout.pins[pin2] = pinout.pins[pin1];

	movzx	eax, BYTE PTR [rdx+66]
	movzx	ecx, BYTE PTR [rdx+67]
	mov	BYTE PTR [rdx+67], al

; 149  : 	pinout.pins[pin1] = p;

	mov	BYTE PTR [rdx+66], cl

; 150  : 	processlayout = true;

	mov	BYTE PTR [rdx+40], 1
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp

; 170  : 			ppubus->groundpin(10);

	mov	rax, QWORD PTR [r9+72]
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp

; 137  : 	pinout.pins[pin] = -2;

	mov	BYTE PTR [rax+66], -2

; 138  : 	processlayout = true;

	jmp	SHORT $LN71@update_ban
$LN17@update_ban:

; 154  : 	for (int i = 0; i < 16; i++) pinout.pins[i] = i;

	xor	eax, eax
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp

; 165  : 			ppubus->resetpins_to_default();

	lea	rcx, QWORD PTR [rdx+56]
	npad	9
$LL44@update_ban:
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp

; 154  : 	for (int i = 0; i < 16; i++) pinout.pins[i] = i;

	mov	BYTE PTR [rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	inc	eax
	cmp	eax, 16
	jl	SHORT $LL44@update_ban

; 155  : 	processlayout = false;

	mov	BYTE PTR [rdx+40], 0
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp

; 166  : 			break;

	jmp	SHORT $LN10@update_ban
$LN16@update_ban:
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp

; 154  : 	for (int i = 0; i < 16; i++) pinout.pins[i] = i;

	xor	eax, eax
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp

; 160  : 			ppubus->resetpins_to_default();

	lea	rcx, QWORD PTR [rdx+56]
	npad	7
$LL35@update_ban:
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp

; 154  : 	for (int i = 0; i < 16; i++) pinout.pins[i] = i;

	mov	BYTE PTR [rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	inc	eax
	cmp	eax, 16
	jl	SHORT $LL35@update_ban
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp

; 163  : 			break;

	jmp	SHORT $LN72@update_ban
$LN15@update_ban:
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp

; 154  : 	for (int i = 0; i < 16; i++) pinout.pins[i] = i;

	xor	eax, eax
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp

; 155  : 			ppubus->resetpins_to_default();

	lea	rcx, QWORD PTR [rdx+56]
	npad	11
$LL26@update_ban:
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp

; 154  : 	for (int i = 0; i < 16; i++) pinout.pins[i] = i;

	mov	BYTE PTR [rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	inc	eax
	cmp	eax, 16
	jl	SHORT $LL26@update_ban
$LN72@update_ban:
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp

; 174  : 	if (ram_mode) return;	// no need to switch (we are in RAM mode)

	mov	BYTE PTR [rdx+40], 0
	mov	rax, QWORD PTR [r9+72]
	mov	BYTE PTR [rax+66], -2
	mov	BYTE PTR [rax+40], 1
	mov	rax, QWORD PTR [r9+72]
	mov	BYTE PTR [rax+67], -2
$LN71@update_ban:
	mov	BYTE PTR [rax+40], 1
$LN10@update_ban:
	cmp	BYTE PTR [r9+120], 0
	jne	SHORT $LN12@update_ban

; 175  : 	int bank = 0;
; 176  : 	switch (state.chr_bank_mode) {

	movzx	ecx, BYTE PTR [r8+102]
	test	ecx, ecx
	je	SHORT $LN20@update_ban
	cmp	ecx, 1
	jne	SHORT $LN12@update_ban

; 181  : 		break;
; 182  : 	case MMC1_CHR_4K_MODE:
; 183  : 		bank = state.chrbank0;
; 184  : 		chr0000 = &romdata[bank << 12]; // 4kB blocks.

	movzx	eax, BYTE PTR [r8+103]
	shl	rax, 12
	add	rax, QWORD PTR [r9+80]
	mov	QWORD PTR [r9+96], rax

; 185  : 		bank = state.chrbank1;
; 186  : 		chr1000 = &romdata[bank << 12]; // 4kB blocks.

	movzx	eax, BYTE PTR [r8+104]
	shl	rax, 12
	add	rax, QWORD PTR [r9+80]
	mov	QWORD PTR [r9+104], rax

; 54   : }

	ret	0
$LN20@update_ban:

; 178  : 		bank = state.chrbank0 >> 1;

	movzx	eax, BYTE PTR [r8+103]
	shr	eax, 1

; 179  : 		chr0000 = &romdata[bank << 13]; // 8 kB blocks.

	shl	eax, 13
	mov	edx, eax
	add	rax, QWORD PTR [r9+80]

; 180  : 		chr1000 = &romdata[bank << 13 | 0x1000];

	bts	rdx, 12
	add	rdx, QWORD PTR [r9+80]
	mov	QWORD PTR [r9+104], rdx
	mov	QWORD PTR [r9+96], rax
$LN12@update_ban:

; 54   : }

	ret	0
?update_banks@mmc1_rom@@QEAAXXZ ENDP			; mmc1_rom::update_banks
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp
;	COMDAT ?write@mmc1_rom@@UEAAXHHE@Z
_TEXT	SEGMENT
this$ = 48
addr$ = 56
addr_from_base$ = 64
data$ = 72
?write@mmc1_rom@@UEAAXHHE@Z PROC			; mmc1_rom::write, COMDAT

; 57   : {

$LN17:
	sub	rsp, 40					; 00000028H
	mov	r10, rcx

; 58   : 	if (addr < 0x8000) {

	cmp	edx, 32768				; 00008000H
	jge	SHORT $LN4@write

; 59   : 		mmc1ram[addr - 0x6000] = data;

	mov	rax, QWORD PTR [rcx+112]
	movsxd	rdx, edx
	mov	BYTE PTR [rax+rdx-24576], r9b

; 97   : 		break;
; 98   : 	}	
; 99   : }

	add	rsp, 40					; 00000028H
	ret	0
$LN4@write:

; 60   : 		return;
; 61   : 	}
; 62   : 	if (data & 0x80) {

	test	r9b, r9b
	jns	SHORT $LN5@write

; 63   : 		state.control |= 0x0C;

	or	BYTE PTR [rcx+99], 12
	movzx	ecx, BYTE PTR [rcx+99]

; 27   : 	state.mirroring = state.control & 0x03;

	movzx	eax, cl

; 28   : 	state.prg_bank_mode = (state.control & 0x0C) >> 2;

	mov	BYTE PTR [r10+101], 3

; 29   : 	state.chr_bank_mode = (state.control & 0x10) >> 4;

	shr	cl, 4
	and	al, 3
	and	cl, 1
	mov	BYTE PTR [r10+100], al
	mov	BYTE PTR [r10+102], cl

; 64   : 		update_control();
; 65   : 		update_banks();

	mov	rcx, r10
	call	?update_banks@mmc1_rom@@QEAAXXZ		; mmc1_rom::update_banks

; 66   : 		state.shift_cnt = 0x04;
; 67   : 		state.shift_reg = 0x00;

	mov	WORD PTR [r10+96], 1024			; 00000400H

; 97   : 		break;
; 98   : 	}	
; 99   : }

	add	rsp, 40					; 00000028H
	ret	0
$LN5@write:

; 68   : 		return;
; 69   : 	}
; 70   : 	
; 71   : 	// fill shift register. (5 bits)
; 72   : 	state.shift_reg >>= 1;

	movzx	eax, BYTE PTR [rcx+96]

; 73   : 	state.shift_reg |= (data & 1) << 4;

	and	r9b, 1

; 74   : 	state.shift_cnt--;

	dec	BYTE PTR [rcx+97]
	shl	r9b, 4
	shr	al, 1
	or	r9b, al

; 75   : 	if (state.shift_cnt != 0xFF) return;

	cmp	BYTE PTR [rcx+97], 255			; 000000ffH
	mov	BYTE PTR [rcx+96], r9b
	jne	SHORT $LN2@write

; 76   : 	
; 77   : 	// shift register is filled with 5 bits, process.
; 78   : 	state.shift_cnt = 0x04;			// reset counter for the shift register again.
; 79   : 	int	function = (addr & 0x6000) >> 13;

	sar	edx, 13
	mov	BYTE PTR [rcx+97], 4
	and	edx, 3

; 80   : 	
; 81   : 	switch (function) {

	je	SHORT $LN7@write
	sub	edx, 1
	je	SHORT $LN8@write
	sub	edx, 1
	je	SHORT $LN9@write
	cmp	edx, 1
	jne	SHORT $LN2@write

; 93   : 		break;
; 94   : 	case MMC1_PRGBANK:
; 95   : 		state.prgbank = state.shift_reg;

	mov	BYTE PTR [rcx+105], r9b

; 97   : 		break;
; 98   : 	}	
; 99   : }

	add	rsp, 40					; 00000028H

; 96   : 		update_banks();

	jmp	?update_banks@mmc1_rom@@QEAAXXZ		; mmc1_rom::update_banks
$LN9@write:

; 89   : 		break;
; 90   : 	case MMC1_CHRBANK1:
; 91   : 		state.chrbank1 = state.shift_reg;

	mov	BYTE PTR [rcx+104], r9b

; 97   : 		break;
; 98   : 	}	
; 99   : }

	add	rsp, 40					; 00000028H

; 92   : 		update_banks();

	jmp	?update_banks@mmc1_rom@@QEAAXXZ		; mmc1_rom::update_banks
$LN8@write:

; 84   : 		update_control();
; 85   : 		break;
; 86   : 	case MMC1_CHRBANK0:
; 87   : 		state.chrbank0 = state.shift_reg;

	mov	BYTE PTR [rcx+103], r9b

; 97   : 		break;
; 98   : 	}	
; 99   : }

	add	rsp, 40					; 00000028H

; 88   : 		update_banks();

	jmp	?update_banks@mmc1_rom@@QEAAXXZ		; mmc1_rom::update_banks
$LN7@write:

; 27   : 	state.mirroring = state.control & 0x03;

	movzx	eax, r9b

; 82   : 	case MMC1_CONTROL:
; 83   : 		state.control = state.shift_reg;

	mov	BYTE PTR [rcx+99], r9b

; 27   : 	state.mirroring = state.control & 0x03;

	and	al, 3
	mov	BYTE PTR [rcx+100], al

; 28   : 	state.prg_bank_mode = (state.control & 0x0C) >> 2;

	movzx	eax, r9b
	shr	al, 2
	and	al, 3

; 29   : 	state.chr_bank_mode = (state.control & 0x10) >> 4;

	shr	r9b, 4
	and	r9b, 1
	mov	BYTE PTR [rcx+101], al
	mov	BYTE PTR [rcx+102], r9b
$LN2@write:

; 97   : 		break;
; 98   : 	}	
; 99   : }

	add	rsp, 40					; 00000028H
	ret	0
?write@mmc1_rom@@UEAAXHHE@Z ENDP			; mmc1_rom::write
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp
;	COMDAT ?set_rom_data@mmc1_rom@@UEAAXPEAE_K@Z
_TEXT	SEGMENT
this$ = 8
data$ = 16
size$ = 24
?set_rom_data@mmc1_rom@@UEAAXPEAE_K@Z PROC		; mmc1_rom::set_rom_data, COMDAT

; 103  : 	devicestart = 0x6000;

	mov	DWORD PTR [rcx+44], 24576		; 00006000H

; 104  : 	deviceend = 0xFFFF;

	mov	DWORD PTR [rcx+48], 65535		; 0000ffffH

; 105  : 	devicemask = 0xFFFF;

	mov	DWORD PTR [rcx+52], 65535		; 0000ffffH

; 106  : 	romdata = data;

	mov	QWORD PTR [rcx+72], rdx

; 107  : 	romsize = (int)size;

	mov	DWORD PTR [rcx+80], r8d

; 108  : 
; 109  : 	// reset state is control = 0x0c
; 110  : 	state.control = 0x0c;

	mov	DWORD PTR [rcx+99], 196620		; 0003000cH

; 111  : 	update_control();
; 112  : 	update_banks();

	jmp	?update_banks@mmc1_rom@@QEAAXXZ		; mmc1_rom::update_banks
?set_rom_data@mmc1_rom@@UEAAXPEAE_K@Z ENDP		; mmc1_rom::set_rom_data
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp
;	COMDAT ??_Gmmc1_vrom@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gmmc1_vrom@@UEAAPEAXI@Z PROC				; mmc1_vrom::`scalar deleting destructor', COMDAT
$LN18:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp

; 125  : mmc1_vrom::~mmc1_vrom() {

	lea	rax, OFFSET FLAT:??_7mmc1_vrom@@6B@
	mov	rdi, rcx
	mov	QWORD PTR [rcx], rax
	mov	ebx, edx

; 126  : 	free(ram);

	mov	rcx, QWORD PTR [rcx+112]
	call	QWORD PTR __imp_free
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp

; 186  : 	free(devicedescriptor);	// be done with it.

	mov	rcx, QWORD PTR [rdi+8]
	lea	rax, OFFSET FLAT:??_7device@@6B@
	mov	QWORD PTR [rdi], rax
	call	QWORD PTR __imp_free
	test	bl, 1
	je	SHORT $LN15@scalar
	mov	edx, 128				; 00000080H
	mov	rcx, rdi
	call	??3@YAXPEAX_K@Z				; operator delete
$LN15@scalar:
	mov	rbx, QWORD PTR [rsp+48]
	mov	rax, rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gmmc1_vrom@@UEAAPEAXI@Z ENDP				; mmc1_vrom::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp
;	COMDAT ??1mmc1_vrom@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1mmc1_vrom@@UEAA@XZ PROC				; mmc1_vrom::~mmc1_vrom, COMDAT

; 125  : mmc1_vrom::~mmc1_vrom() {

$LN13:
	push	rbx
	sub	rsp, 32					; 00000020H
	lea	rax, OFFSET FLAT:??_7mmc1_vrom@@6B@
	mov	rbx, rcx
	mov	QWORD PTR [rcx], rax

; 126  : 	free(ram);

	mov	rcx, QWORD PTR [rcx+112]
	call	QWORD PTR __imp_free
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp

; 186  : 	free(devicedescriptor);	// be done with it.

	mov	rcx, QWORD PTR [rbx+8]
	lea	rax, OFFSET FLAT:??_7device@@6B@
	mov	QWORD PTR [rbx], rax
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp

; 127  : }

	add	rsp, 32					; 00000020H
	pop	rbx
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp

; 186  : 	free(devicedescriptor);	// be done with it.

	rex_jmp	QWORD PTR __imp_free
??1mmc1_vrom@@UEAA@XZ ENDP				; mmc1_vrom::~mmc1_vrom
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp
;	COMDAT ?read@mmc1_vrom@@UEAAEHH@Z
_TEXT	SEGMENT
this$ = 8
addr$ = 16
addr_from_base$ = 24
?read@mmc1_vrom@@UEAAEHH@Z PROC				; mmc1_vrom::read, COMDAT

; 131  : 	if (ram_mode) return ram[addr_from_base];

	cmp	BYTE PTR [rcx+120], 0
	movsxd	rax, edx
	je	SHORT $LN2@read
	mov	rax, QWORD PTR [rcx+112]
	movsxd	rdx, r8d
	movzx	eax, BYTE PTR [rdx+rax]

; 134  : }

	ret	0
$LN2@read:

; 132  : 	if (addr < 0x1000) return chr0000[addr];

	mov	rdx, rax
	cmp	eax, 4096				; 00001000H
	jge	SHORT $LN3@read
	mov	rax, QWORD PTR [rcx+96]
	movzx	eax, BYTE PTR [rdx+rax]

; 134  : }

	ret	0
$LN3@read:

; 133  : 	return chr1000[addr - 0x1000];

	mov	rax, QWORD PTR [rcx+104]
	movzx	eax, BYTE PTR [rax+rdx-4096]

; 134  : }

	ret	0
?read@mmc1_vrom@@UEAAEHH@Z ENDP				; mmc1_vrom::read
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp
;	COMDAT ?write@mmc1_vrom@@UEAAXHHE@Z
_TEXT	SEGMENT
this$ = 8
addr$ = 16
addr_from_base$ = 24
data$ = 32
?write@mmc1_vrom@@UEAAXHHE@Z PROC			; mmc1_vrom::write, COMDAT

; 138  : 	// write when in RAM_MODE.
; 139  : 	if (ram_mode) ram[addr_from_base] = data;

	cmp	BYTE PTR [rcx+120], 0
	je	SHORT $LN2@write
	mov	rax, QWORD PTR [rcx+112]
	movsxd	rdx, r8d
	mov	BYTE PTR [rdx+rax], r9b
$LN2@write:

; 140  : }

	ret	0
?write@mmc1_vrom@@UEAAXHHE@Z ENDP			; mmc1_vrom::write
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp
;	COMDAT ?set_rom_data@mmc1_vrom@@UEAAXPEAE_K@Z
_TEXT	SEGMENT
this$ = 8
data$ = 16
size$ = 24
?set_rom_data@mmc1_vrom@@UEAAXPEAE_K@Z PROC		; mmc1_vrom::set_rom_data, COMDAT

; 144  : 	devicestart = 0x0000;

	mov	DWORD PTR [rcx+44], 0

; 145  : 	deviceend = 0x1FFF;

	mov	DWORD PTR [rcx+48], 8191		; 00001fffH

; 146  : 	devicemask = 0x1FFF;

	mov	DWORD PTR [rcx+52], 8191		; 00001fffH

; 147  : 	romdata = data;

	mov	QWORD PTR [rcx+80], rdx

; 148  : 	romsize = (int)size;

	mov	DWORD PTR [rcx+88], r8d

; 149  : }

	ret	0
?set_rom_data@mmc1_vrom@@UEAAXPEAE_K@Z ENDP		; mmc1_vrom::set_rom_data
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp
;	COMDAT ?update_banks@mmc1_vrom@@QEAAXAEAUmmc1_state@@@Z
_TEXT	SEGMENT
this$ = 8
state$ = 16
?update_banks@mmc1_vrom@@QEAAXAEAUmmc1_state@@@Z PROC	; mmc1_vrom::update_banks, COMDAT

; 152  : 	if (ppubus) {

	mov	r9, QWORD PTR [rcx+72]
	mov	r10, rdx
	mov	r8, rcx
	test	r9, r9
	je	$LN2@update_ban

; 153  : 		switch (state.mirroring) {

	movzx	ecx, BYTE PTR [rdx+4]
	test	ecx, ecx
	je	$LN7@update_ban
	sub	ecx, 1
	je	SHORT $LN8@update_ban
	sub	ecx, 1
	je	SHORT $LN9@update_ban
	cmp	ecx, 1
	jne	$LN2@update_ban
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp

; 154  : 	for (int i = 0; i < 16; i++) pinout.pins[i] = i;

	xor	eax, eax
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp

; 168  : 			ppubus->resetpins_to_default();

	lea	rcx, QWORD PTR [r9+56]
	npad	8
$LL41@update_ban:
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp

; 154  : 	for (int i = 0; i < 16; i++) pinout.pins[i] = i;

	mov	BYTE PTR [rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	inc	eax
	cmp	eax, 16
	jl	SHORT $LL41@update_ban

; 155  : 	processlayout = false;

	mov	BYTE PTR [r9+40], 0
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp

; 169  : 			ppubus->swappins(10, 11);

	mov	rdx, QWORD PTR [r8+72]
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp

; 148  : 	pinout.pins[pin2] = pinout.pins[pin1];

	movzx	eax, BYTE PTR [rdx+66]
	movzx	ecx, BYTE PTR [rdx+67]
	mov	BYTE PTR [rdx+67], al

; 149  : 	pinout.pins[pin1] = p;

	mov	BYTE PTR [rdx+66], cl

; 150  : 	processlayout = true;

	mov	BYTE PTR [rdx+40], 1
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp

; 170  : 			ppubus->groundpin(10);

	mov	rax, QWORD PTR [r8+72]
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp

; 137  : 	pinout.pins[pin] = -2;

	mov	BYTE PTR [rax+66], -2

; 138  : 	processlayout = true;

	jmp	SHORT $LN63@update_ban
$LN9@update_ban:

; 154  : 	for (int i = 0; i < 16; i++) pinout.pins[i] = i;

	xor	eax, eax
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp

; 165  : 			ppubus->resetpins_to_default();

	lea	rcx, QWORD PTR [r9+56]
	npad	8
$LL36@update_ban:
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp

; 154  : 	for (int i = 0; i < 16; i++) pinout.pins[i] = i;

	mov	BYTE PTR [rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	inc	eax
	cmp	eax, 16
	jl	SHORT $LL36@update_ban

; 155  : 	processlayout = false;

	mov	BYTE PTR [r9+40], 0
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp

; 166  : 			break;

	jmp	SHORT $LN2@update_ban
$LN8@update_ban:
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp

; 154  : 	for (int i = 0; i < 16; i++) pinout.pins[i] = i;

	xor	eax, eax
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp

; 160  : 			ppubus->resetpins_to_default();

	lea	rcx, QWORD PTR [r9+56]
	npad	6
$LL27@update_ban:
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp

; 154  : 	for (int i = 0; i < 16; i++) pinout.pins[i] = i;

	mov	BYTE PTR [rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	inc	eax
	cmp	eax, 16
	jl	SHORT $LL27@update_ban
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp

; 163  : 			break;

	jmp	SHORT $LN64@update_ban
$LN7@update_ban:
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp

; 154  : 	for (int i = 0; i < 16; i++) pinout.pins[i] = i;

	xor	eax, eax
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp

; 155  : 			ppubus->resetpins_to_default();

	lea	rcx, QWORD PTR [r9+56]
	npad	11
$LL18@update_ban:
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp

; 154  : 	for (int i = 0; i < 16; i++) pinout.pins[i] = i;

	mov	BYTE PTR [rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	inc	eax
	cmp	eax, 16
	jl	SHORT $LL18@update_ban
$LN64@update_ban:
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\mappers\mapper_001.cpp

; 174  : 	if (ram_mode) return;	// no need to switch (we are in RAM mode)

	mov	BYTE PTR [r9+40], 0
	mov	rax, QWORD PTR [r8+72]
	mov	BYTE PTR [rax+66], -2
	mov	BYTE PTR [rax+40], 1
	mov	rax, QWORD PTR [r8+72]
	mov	BYTE PTR [rax+67], -2
$LN63@update_ban:
	mov	BYTE PTR [rax+40], 1
$LN2@update_ban:
	cmp	BYTE PTR [r8+120], 0
	jne	SHORT $LN4@update_ban

; 175  : 	int bank = 0;
; 176  : 	switch (state.chr_bank_mode) {

	movzx	ecx, BYTE PTR [r10+6]
	test	ecx, ecx
	je	SHORT $LN12@update_ban
	cmp	ecx, 1
	jne	SHORT $LN4@update_ban

; 181  : 		break;
; 182  : 	case MMC1_CHR_4K_MODE:
; 183  : 		bank = state.chrbank0;
; 184  : 		chr0000 = &romdata[bank << 12]; // 4kB blocks.

	movzx	eax, BYTE PTR [r10+7]
	shl	rax, 12
	add	rax, QWORD PTR [r8+80]
	mov	QWORD PTR [r8+96], rax

; 185  : 		bank = state.chrbank1;
; 186  : 		chr1000 = &romdata[bank << 12]; // 4kB blocks.

	movzx	eax, BYTE PTR [r10+8]
	shl	rax, 12
	add	rax, QWORD PTR [r8+80]
	mov	QWORD PTR [r8+104], rax

; 187  : 		break;
; 188  : 	}
; 189  : }

	ret	0
$LN12@update_ban:

; 177  : 	case MMC1_CHR_8K_MODE:
; 178  : 		bank = state.chrbank0 >> 1;

	movzx	eax, BYTE PTR [r10+7]
	shr	eax, 1

; 179  : 		chr0000 = &romdata[bank << 13]; // 8 kB blocks.

	shl	eax, 13
	mov	edx, eax
	add	rax, QWORD PTR [r8+80]

; 180  : 		chr1000 = &romdata[bank << 13 | 0x1000];

	bts	rdx, 12
	add	rdx, QWORD PTR [r8+80]
	mov	QWORD PTR [r8+104], rdx
	mov	QWORD PTR [r8+96], rax
$LN4@update_ban:

; 187  : 		break;
; 188  : 	}
; 189  : }

	ret	0
?update_banks@mmc1_vrom@@QEAAXAEAUmmc1_state@@@Z ENDP	; mmc1_vrom::update_banks
_TEXT	ENDS
END
