; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27050.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0O@LOIPCCFK@NROM?50x00?5ROM@		; `string'
PUBLIC	??_C@_0P@JKKAPLGM@NROM?50x00?5VROM@		; `string'
PUBLIC	??_C@_0P@JADONGGG@NROM?50x00?5VRAM@		; `string'
PUBLIC	??_R2vram@@8					; vram::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@vram@@8				; vram::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3vram@@8					; vram::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVvram@@@8				; vram `RTTI Type Descriptor'
PUBLIC	??_R4rom@@6B@					; rom::`RTTI Complete Object Locator'
PUBLIC	??_R4vram@@6B@					; vram::`RTTI Complete Object Locator'
PUBLIC	??_R4vrom@@6B@					; vrom::`RTTI Complete Object Locator'
PUBLIC	??_7vram@@6B@					; vram::`vftable'
PUBLIC	??_7vrom@@6B@					; vrom::`vftable'
PUBLIC	??_7rom@@6B@					; rom::`vftable'
;	COMDAT ??_7rom@@6B@
CONST	SEGMENT
??_7rom@@6B@ DQ	FLAT:??_R4rom@@6B@			; rom::`vftable'
	DQ	FLAT:?rundevice@device@@UEAAHH@Z
	DQ	FLAT:?dma@device@@UEAAXPEAE_N1@Z
	DQ	FLAT:??_Erom@@UEAAPEAXI@Z
	DQ	FLAT:?write@rom@@UEAAXHHE@Z
	DQ	FLAT:?read@rom@@UEAAEHH@Z
	DQ	FLAT:?set_rom_data@rom@@UEAAXPEAE_K@Z
CONST	ENDS
;	COMDAT ??_7vrom@@6B@
CONST	SEGMENT
??_7vrom@@6B@ DQ FLAT:??_R4vrom@@6B@			; vrom::`vftable'
	DQ	FLAT:?rundevice@device@@UEAAHH@Z
	DQ	FLAT:?dma@device@@UEAAXPEAE_N1@Z
	DQ	FLAT:??_Evrom@@UEAAPEAXI@Z
	DQ	FLAT:?write@vrom@@UEAAXHHE@Z
	DQ	FLAT:?read@vrom@@UEAAEHH@Z
	DQ	FLAT:?set_rom_data@vrom@@UEAAXPEAE_K@Z
CONST	ENDS
;	COMDAT ??_7vram@@6B@
CONST	SEGMENT
??_7vram@@6B@ DQ FLAT:??_R4vram@@6B@			; vram::`vftable'
	DQ	FLAT:?rundevice@device@@UEAAHH@Z
	DQ	FLAT:?dma@device@@UEAAXPEAE_N1@Z
	DQ	FLAT:??_Evram@@UEAAPEAXI@Z
	DQ	FLAT:?write@vram@@UEAAXHHE@Z
	DQ	FLAT:?read@vram@@UEAAEHH@Z
	DQ	FLAT:?set_rom_data@vrom@@UEAAXPEAE_K@Z
CONST	ENDS
;	COMDAT ??_R4vrom@@6B@
rdata$r	SEGMENT
??_R4vrom@@6B@ DD 01H					; vrom::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVvrom@@@8
	DD	imagerel ??_R3vrom@@8
	DD	imagerel ??_R4vrom@@6B@
rdata$r	ENDS
;	COMDAT ??_R4vram@@6B@
rdata$r	SEGMENT
??_R4vram@@6B@ DD 01H					; vram::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVvram@@@8
	DD	imagerel ??_R3vram@@8
	DD	imagerel ??_R4vram@@6B@
rdata$r	ENDS
;	COMDAT ??_R4rom@@6B@
rdata$r	SEGMENT
??_R4rom@@6B@ DD 01H					; rom::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVrom@@@8
	DD	imagerel ??_R3rom@@8
	DD	imagerel ??_R4rom@@6B@
rdata$r	ENDS
;	COMDAT ??_R0?AVvram@@@8
data$r	SEGMENT
??_R0?AVvram@@@8 DQ FLAT:??_7type_info@@6B@		; vram `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVvram@@', 00H
data$r	ENDS
;	COMDAT ??_R3vram@@8
rdata$r	SEGMENT
??_R3vram@@8 DD	00H					; vram::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	imagerel ??_R2vram@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@vram@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@vram@@8 DD imagerel ??_R0?AVvram@@@8	; vram::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3vram@@8
rdata$r	ENDS
;	COMDAT ??_R2vram@@8
rdata$r	SEGMENT
??_R2vram@@8 DD	imagerel ??_R1A@?0A@EA@vram@@8		; vram::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@vrom@@8
	DD	imagerel ??_R1A@?0A@EA@bus_device@@8
	DD	imagerel ??_R1A@?0A@EA@device@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_C@_0P@JADONGGG@NROM?50x00?5VRAM@
CONST	SEGMENT
??_C@_0P@JADONGGG@NROM?50x00?5VRAM@ DB 'NROM 0x00 VRAM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JKKAPLGM@NROM?50x00?5VROM@
CONST	SEGMENT
??_C@_0P@JKKAPLGM@NROM?50x00?5VROM@ DB 'NROM 0x00 VROM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LOIPCCFK@NROM?50x00?5ROM@
CONST	SEGMENT
??_C@_0O@LOIPCCFK@NROM?50x00?5ROM@ DB 'NROM 0x00 ROM', 00H ; `string'
PUBLIC	?read@vram@@UEAAEHH@Z				; vram::read
PUBLIC	?write@vram@@UEAAXHHE@Z				; vram::write
PUBLIC	??1vram@@UEAA@XZ				; vram::~vram
PUBLIC	??_Gvram@@UEAAPEAXI@Z				; vram::`scalar deleting destructor'
PUBLIC	?link_ppu_bus@vrom@@QEAAXPEAVbus_device@@@Z	; vrom::link_ppu_bus
PUBLIC	?read@vrom@@UEAAEHH@Z				; vrom::read
PUBLIC	?write@vrom@@UEAAXHHE@Z				; vrom::write
PUBLIC	?set_rom_data@vrom@@UEAAXPEAE_K@Z		; vrom::set_rom_data
PUBLIC	??_Gvrom@@UEAAPEAXI@Z				; vrom::`scalar deleting destructor'
PUBLIC	?read@rom@@UEAAEHH@Z				; rom::read
PUBLIC	?write@rom@@UEAAXHHE@Z				; rom::write
PUBLIC	?set_rom_data@rom@@UEAAXPEAE_K@Z		; rom::set_rom_data
PUBLIC	??_Grom@@UEAAPEAXI@Z				; rom::`scalar deleting destructor'
PUBLIC	??0rom@@QEAA@XZ					; rom::rom
PUBLIC	??1rom@@UEAA@XZ					; rom::~rom
PUBLIC	??0vrom@@QEAA@XZ				; vrom::vrom
PUBLIC	??1vrom@@UEAA@XZ				; vrom::~vrom
EXTRN	??_Evrom@@UEAAPEAXI@Z:PROC			; vrom::`vector deleting destructor'
EXTRN	??_Evram@@UEAAPEAXI@Z:PROC			; vram::`vector deleting destructor'
EXTRN	??_Erom@@UEAAPEAXI@Z:PROC			; rom::`vector deleting destructor'
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1vram@@UEAA@XZ DD imagerel $LN13
	DD	imagerel $LN13+55
	DD	imagerel $unwind$??1vram@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gvram@@UEAAPEAXI@Z DD imagerel $LN18
	DD	imagerel $LN18+87
	DD	imagerel $unwind$??_Gvram@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gvrom@@UEAAPEAXI@Z DD imagerel $LN15
	DD	imagerel $LN15+67
	DD	imagerel $unwind$??_Gvrom@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Grom@@UEAAPEAXI@Z DD imagerel $LN15
	DD	imagerel $LN15+67
	DD	imagerel $unwind$??_Grom@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0rom@@QEAA@XZ DD imagerel $LN7
	DD	imagerel $LN7+76
	DD	imagerel $unwind$??0rom@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0vrom@@QEAA@XZ DD imagerel $LN7
	DD	imagerel $LN7+76
	DD	imagerel $unwind$??0vrom@@QEAA@XZ
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0vrom@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0rom@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Grom@@UEAAPEAXI@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gvrom@@UEAAPEAXI@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gvram@@UEAAPEAXI@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1vram@@UEAA@XZ DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\rom.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\rom.cpp
;	COMDAT ??1vrom@@UEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1vrom@@UEAA@XZ PROC					; vrom::~vrom, COMDAT
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp

; 185  : device::~device() {

	lea	rax, OFFSET FLAT:??_7device@@6B@
	mov	QWORD PTR [rcx], rax

; 186  : 	free(devicedescriptor);	// be done with it.

	mov	rcx, QWORD PTR [rcx+8]
	rex_jmp	QWORD PTR __imp_free
??1vrom@@UEAA@XZ ENDP					; vrom::~vrom
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\rom.cpp
;	COMDAT ??0vrom@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0vrom@@QEAA@XZ PROC					; vrom::vrom, COMDAT

; 33   : vrom::vrom() {

$LN7:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	call	??0bus_device@@QEAA@XZ			; bus_device::bus_device

; 34   : 	strcpy_s(this->get_device_descriptor(), MAX_DESCRIPTOR_LENGTH, "NROM 0x00 VROM");

	mov	rcx, QWORD PTR [rbx+8]
	lea	rax, OFFSET FLAT:??_7vrom@@6B@
	lea	r8, OFFSET FLAT:??_C@_0P@JKKAPLGM@NROM?50x00?5VROM@
	mov	QWORD PTR [rbx], rax
	mov	edx, 128				; 00000080H
	call	QWORD PTR __imp_strcpy_s

; 35   : 	devicestart = 0x0000;
; 36   : 	deviceend = 0x1FFF;
; 37   : 	devicemask = 0x1FFF;
; 38   : }

	mov	rax, rbx
	mov	DWORD PTR [rbx+44], 0
	mov	DWORD PTR [rbx+48], 8191		; 00001fffH
	mov	DWORD PTR [rbx+52], 8191		; 00001fffH
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0vrom@@QEAA@XZ ENDP					; vrom::vrom
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\rom.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\rom.cpp
;	COMDAT ??1rom@@UEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1rom@@UEAA@XZ PROC					; rom::~rom, COMDAT
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp

; 185  : device::~device() {

	lea	rax, OFFSET FLAT:??_7device@@6B@
	mov	QWORD PTR [rcx], rax

; 186  : 	free(devicedescriptor);	// be done with it.

	mov	rcx, QWORD PTR [rcx+8]
	rex_jmp	QWORD PTR __imp_free
??1rom@@UEAA@XZ ENDP					; rom::~rom
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\rom.cpp
;	COMDAT ??0rom@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0rom@@QEAA@XZ PROC					; rom::rom, COMDAT

; 4    : rom::rom() {

$LN7:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	call	??0bus_device@@QEAA@XZ			; bus_device::bus_device

; 5    : 	// default to 16K rom with mirrored 0xC000 (to 0x8000)
; 6    : 	strcpy_s(this->get_device_descriptor(), MAX_DESCRIPTOR_LENGTH, "NROM 0x00 ROM");

	mov	rcx, QWORD PTR [rbx+8]
	lea	rax, OFFSET FLAT:??_7rom@@6B@
	lea	r8, OFFSET FLAT:??_C@_0O@LOIPCCFK@NROM?50x00?5ROM@
	mov	QWORD PTR [rbx], rax
	mov	edx, 128				; 00000080H
	call	QWORD PTR __imp_strcpy_s

; 7    : 	devicestart = 0x8000;
; 8    : 	deviceend = 0xFFFF;
; 9    : 	devicemask = 0xBFFF;	// 1011 1111 1111 1111
; 10   : }

	mov	rax, rbx
	mov	DWORD PTR [rbx+44], 32768		; 00008000H
	mov	DWORD PTR [rbx+48], 65535		; 0000ffffH
	mov	DWORD PTR [rbx+52], 49151		; 0000bfffH
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0rom@@QEAA@XZ ENDP					; rom::rom
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp
;	COMDAT ??_Grom@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Grom@@UEAAPEAXI@Z PROC				; rom::`scalar deleting destructor', COMDAT
$LN15:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 185  : device::~device() {

	lea	rax, OFFSET FLAT:??_7device@@6B@
	mov	rdi, rcx
	mov	QWORD PTR [rcx], rax
	mov	ebx, edx

; 186  : 	free(devicedescriptor);	// be done with it.

	mov	rcx, QWORD PTR [rcx+8]
	call	QWORD PTR __imp_free
	test	bl, 1
	je	SHORT $LN12@scalar
	mov	edx, 88					; 00000058H
	mov	rcx, rdi
	call	??3@YAXPEAX_K@Z				; operator delete
$LN12@scalar:
	mov	rbx, QWORD PTR [rsp+48]
	mov	rax, rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Grom@@UEAAPEAXI@Z ENDP				; rom::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\rom.cpp
;	COMDAT ?set_rom_data@rom@@UEAAXPEAE_K@Z
_TEXT	SEGMENT
this$ = 8
data$ = 16
size$ = 24
?set_rom_data@rom@@UEAAXPEAE_K@Z PROC			; rom::set_rom_data, COMDAT

; 16   : 	this->romdata = data;

	mov	QWORD PTR [rcx+72], rdx

; 17   : 	this->romsize = (int)size;
; 18   : 	// extra logic for 16kB / 32kB roms.
; 19   : 	if (size == 16384) devicemask = 0xBFFF; else devicemask = 0xFFFF;
; 20   : }

	cmp	r8, 16384				; 00004000H
	mov	edx, 65535				; 0000ffffH
	mov	DWORD PTR [rcx+80], r8d
	mov	eax, 49151				; 0000bfffH
	cmovne	eax, edx
	mov	DWORD PTR [rcx+52], eax
	ret	0
?set_rom_data@rom@@UEAAXPEAE_K@Z ENDP			; rom::set_rom_data
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\rom.cpp
;	COMDAT ?write@rom@@UEAAXHHE@Z
_TEXT	SEGMENT
this$ = 8
addr$ = 16
addr_from_base$ = 24
data$ = 32
?write@rom@@UEAAXHHE@Z PROC				; rom::write, COMDAT

; 23   : 	// do actually nothing.
; 24   : 	// ROM are read only and cannot be written to.
; 25   : 	// especially ROM 0x00 -> other roms with mappers will control the mapper logic.
; 26   : }

	ret	0
?write@rom@@UEAAXHHE@Z ENDP				; rom::write
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\rom.cpp
;	COMDAT ?read@rom@@UEAAEHH@Z
_TEXT	SEGMENT
this$ = 8
addr$ = 16
addr_from_base$ = 24
?read@rom@@UEAAEHH@Z PROC				; rom::read, COMDAT

; 29   : 	// read ROM data.
; 30   : 	return romdata[addr_from_base];

	mov	rax, QWORD PTR [rcx+72]
	movsxd	rdx, r8d
	movzx	eax, BYTE PTR [rdx+rax]

; 31   : }

	ret	0
?read@rom@@UEAAEHH@Z ENDP				; rom::read
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp
;	COMDAT ??_Gvrom@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gvrom@@UEAAPEAXI@Z PROC				; vrom::`scalar deleting destructor', COMDAT
$LN15:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 185  : device::~device() {

	lea	rax, OFFSET FLAT:??_7device@@6B@
	mov	rdi, rcx
	mov	QWORD PTR [rcx], rax
	mov	ebx, edx

; 186  : 	free(devicedescriptor);	// be done with it.

	mov	rcx, QWORD PTR [rcx+8]
	call	QWORD PTR __imp_free
	test	bl, 1
	je	SHORT $LN12@scalar
	mov	edx, 96					; 00000060H
	mov	rcx, rdi
	call	??3@YAXPEAX_K@Z				; operator delete
$LN12@scalar:
	mov	rbx, QWORD PTR [rsp+48]
	mov	rax, rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gvrom@@UEAAPEAXI@Z ENDP				; vrom::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\rom.cpp
;	COMDAT ?set_rom_data@vrom@@UEAAXPEAE_K@Z
_TEXT	SEGMENT
this$ = 8
data$ = 16
size$ = 24
?set_rom_data@vrom@@UEAAXPEAE_K@Z PROC			; vrom::set_rom_data, COMDAT

; 44   : 	this->romdata = data;
; 45   : 	this->romsize = (int)size;
; 46   : 	devicemask = ((int)size - 1);

	lea	eax, DWORD PTR [r8-1]
	mov	QWORD PTR [rcx+80], rdx
	mov	DWORD PTR [rcx+52], eax
	mov	DWORD PTR [rcx+88], r8d

; 47   : }

	ret	0
?set_rom_data@vrom@@UEAAXPEAE_K@Z ENDP			; vrom::set_rom_data
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\rom.cpp
;	COMDAT ?write@vrom@@UEAAXHHE@Z
_TEXT	SEGMENT
this$ = 8
addr$ = 16
addr_from_base$ = 24
data$ = 32
?write@vrom@@UEAAXHHE@Z PROC				; vrom::write, COMDAT

; 50   : 	// do nothing ROM=ROM as in read ONLY memory
; 51   : }

	ret	0
?write@vrom@@UEAAXHHE@Z ENDP				; vrom::write
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\rom.cpp
;	COMDAT ?read@vrom@@UEAAEHH@Z
_TEXT	SEGMENT
this$ = 8
addr$ = 16
addr_from_base$ = 24
?read@vrom@@UEAAEHH@Z PROC				; vrom::read, COMDAT

; 54   : 	return romdata[addr_from_base];

	mov	rax, QWORD PTR [rcx+80]
	movsxd	rdx, r8d
	movzx	eax, BYTE PTR [rdx+rax]

; 55   : }

	ret	0
?read@vrom@@UEAAEHH@Z ENDP				; vrom::read
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\rom.cpp
;	COMDAT ?link_ppu_bus@vrom@@QEAAXPEAVbus_device@@@Z
_TEXT	SEGMENT
this$ = 8
ppu_bus$ = 16
?link_ppu_bus@vrom@@QEAAXPEAVbus_device@@@Z PROC	; vrom::link_ppu_bus, COMDAT

; 58   : 	ppubus = ppu_bus;

	mov	QWORD PTR [rcx+72], rdx

; 59   : }

	ret	0
?link_ppu_bus@vrom@@QEAAXPEAVbus_device@@@Z ENDP	; vrom::link_ppu_bus
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\rom.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp
;	COMDAT ??_Gvram@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gvram@@UEAAPEAXI@Z PROC				; vram::`scalar deleting destructor', COMDAT
$LN18:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\rom.cpp

; 69   : vram::~vram() {

	lea	rax, OFFSET FLAT:??_7vram@@6B@
	mov	rdi, rcx
	mov	QWORD PTR [rcx], rax
	mov	ebx, edx

; 70   : 	free(ram);

	mov	rcx, QWORD PTR [rcx+96]
	call	QWORD PTR __imp_free
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp

; 186  : 	free(devicedescriptor);	// be done with it.

	mov	rcx, QWORD PTR [rdi+8]
	lea	rax, OFFSET FLAT:??_7device@@6B@
	mov	QWORD PTR [rdi], rax
	call	QWORD PTR __imp_free
	test	bl, 1
	je	SHORT $LN15@scalar
	mov	edx, 104				; 00000068H
	mov	rcx, rdi
	call	??3@YAXPEAX_K@Z				; operator delete
$LN15@scalar:
	mov	rbx, QWORD PTR [rsp+48]
	mov	rax, rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gvram@@UEAAPEAXI@Z ENDP				; vram::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\rom.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\rom.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\rom.cpp
;	COMDAT ??1vram@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1vram@@UEAA@XZ PROC					; vram::~vram, COMDAT

; 69   : vram::~vram() {

$LN13:
	push	rbx
	sub	rsp, 32					; 00000020H
	lea	rax, OFFSET FLAT:??_7vram@@6B@
	mov	rbx, rcx
	mov	QWORD PTR [rcx], rax

; 70   : 	free(ram);

	mov	rcx, QWORD PTR [rcx+96]
	call	QWORD PTR __imp_free
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp

; 186  : 	free(devicedescriptor);	// be done with it.

	mov	rcx, QWORD PTR [rbx+8]
	lea	rax, OFFSET FLAT:??_7device@@6B@
	mov	QWORD PTR [rbx], rax
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\rom.cpp

; 71   : }

	add	rsp, 32					; 00000020H
	pop	rbx
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\bus.cpp

; 186  : 	free(devicedescriptor);	// be done with it.

	rex_jmp	QWORD PTR __imp_free
??1vram@@UEAA@XZ ENDP					; vram::~vram
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\rom.cpp
;	COMDAT ?write@vram@@UEAAXHHE@Z
_TEXT	SEGMENT
this$ = 8
addr$ = 16
addr_from_base$ = 24
data$ = 32
?write@vram@@UEAAXHHE@Z PROC				; vram::write, COMDAT

; 74   : 	ram[addr_from_base] = data;

	mov	rax, QWORD PTR [rcx+96]
	movsxd	rdx, r8d
	mov	BYTE PTR [rdx+rax], r9b

; 75   : }

	ret	0
?write@vram@@UEAAXHHE@Z ENDP				; vram::write
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\bus\rom\rom.cpp
;	COMDAT ?read@vram@@UEAAEHH@Z
_TEXT	SEGMENT
this$ = 8
addr$ = 16
addr_from_base$ = 24
?read@vram@@UEAAEHH@Z PROC				; vram::read, COMDAT

; 78   : 	return ram[addr_from_base];

	mov	rax, QWORD PTR [rcx+96]
	movsxd	rdx, r8d
	movzx	eax, BYTE PTR [rdx+rax]

; 79   : }

	ret	0
?read@vram@@UEAAEHH@Z ENDP				; vram::read
_TEXT	ENDS
END
