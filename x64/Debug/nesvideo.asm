; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27050.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__FF24E80D_stdafx@h DB 01H
__84F95A01_denveremu@pch DB 01H
__F3E1CC92_nesvideo@h DB 01H
__A2CA72C9_nesvideo@cpp DB 01H
__ACA0BEE6_malloc@h DB 01H
msvcjmc	ENDS
CONST	SEGMENT
?ntscpalette@@3QBEB DB 04dH				; ntscpalette
	DB	04dH
	DB	04dH
	DB	01H
	DB	017H
	DB	04bH
	DB	0dH
	DB	0cH
	DB	060H
	DB	01fH
	DB	05H
	DB	05eH
	DB	031H
	DB	02H
	DB	045H
	DB	03bH
	DB	03H
	DB	022H
	DB	03aH
	DB	08H
	DB	03H
	DB	02dH
	DB	011H
	DB	00H
	DB	01bH
	DB	01cH
	DB	00H
	DB	0aH
	DB	026H
	DB	00H
	DB	00H
	DB	02bH
	DB	00H
	DB	00H
	DB	029H
	DB	08H
	DB	00H
	DB	022H
	DB	029H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	09cH
	DB	09cH
	DB	09cH
	DB	01aH
	DB	045H
	DB	099H
	DB	033H
	DB	032H
	DB	0b9H
	DB	053H
	DB	024H
	DB	0b5H
	DB	06fH
	DB	01dH
	DB	08fH
	DB	07fH
	DB	01fH
	DB	057H
	DB	07dH
	DB	029H
	DB	020H
	DB	06aH
	DB	03aH
	DB	00H
	DB	04cH
	DB	04dH
	DB	00H
	DB	02dH
	DB	05dH
	DB	00H
	DB	016H
	DB	066H
	DB	04H
	DB	0cH
	DB	063H
	DB	02aH
	DB	0dH
	DB	057H
	DB	062H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0feH
	DB	0ffH
	DB	0ffH
	DB	064H
	DB	099H
	DB	0fcH
	DB	084H
	DB	082H
	DB	0ffH
	DB	0aaH
	DB	070H
	DB	0ffH
	DB	0ccH
	DB	068H
	DB	0f1H
	DB	0deH
	DB	06aH
	DB	0afH
	DB	0dcH
	DB	077H
	DB	06bH
	DB	0c5H
	DB	08cH
	DB	039H
	DB	0a2H
	DB	0a3H
	DB	021H
	DB	07cH
	DB	0b7H
	DB	024H
	DB	05eH
	DB	0c1H
	DB	041H
	DB	04fH
	DB	0beH
	DB	078H
	DB	051H
	DB	0afH
	DB	0bdH
	DB	037H
	DB	037H
	DB	037H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0feH
	DB	0ffH
	DB	0ffH
	DB	0bbH
	DB	0d3H
	DB	0fdH
	DB	0caH
	DB	0c9H
	DB	0ffH
	DB	0dbH
	DB	0c1H
	DB	0ffH
	DB	0e9H
	DB	0bdH
	DB	0f9H
	DB	0f1H
	DB	0beH
	DB	0ddH
	DB	0f0H
	DB	0c4H
	DB	0beH
	DB	0e7H
	DB	0ceH
	DB	0a6H
	DB	0d7H
	DB	0d8H
	DB	099H
	DB	0c6H
	DB	0e0H
	DB	09aH
	DB	0b8H
	DB	0e5H
	DB	0aaH
	DB	0b1H
	DB	0e3H
	DB	0c4H
	DB	0b2H
	DB	0ddH
	DB	0e3H
	DB	0a5H
	DB	0a5H
	DB	0a5H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
PUBLIC	??0nesvideo@@QEAA@XZ				; nesvideo::nesvideo
PUBLIC	??1nesvideo@@QEAA@XZ				; nesvideo::~nesvideo
PUBLIC	?process_ppu_image@nesvideo@@QEAAXPEAG@Z	; nesvideo::process_ppu_image
PUBLIC	?getFrame@nesvideo@@QEAAPEAXXZ			; nesvideo::getFrame
PUBLIC	__JustMyCode_Default
EXTRN	__imp_free:PROC
EXTRN	__imp_malloc:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__CxxFrameHandler3:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0nesvideo@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$??0nesvideo@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1nesvideo@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+93
	DD	imagerel $unwind$??1nesvideo@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?process_ppu_image@nesvideo@@QEAAXPEAG@Z DD imagerel $LN6
	DD	imagerel $LN6+234
	DD	imagerel $unwind$?process_ppu_image@nesvideo@@QEAAXPEAG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getFrame@nesvideo@@QEAAPEAXXZ DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$?getFrame@nesvideo@@QEAAPEAXXZ
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getFrame@nesvideo@@QEAAPEAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?process_ppu_image@nesvideo@@QEAAXPEAG@Z DD 025052f01H
	DD	01132318H
	DD	0700c002dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1nesvideo@@QEAA@XZ DD imagerel ??1nesvideo@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1nesvideo@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1nesvideo@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1nesvideo@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1nesvideo@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0nesvideo@@QEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\nesvideo.cpp
;	COMDAT ?getFrame@nesvideo@@QEAAPEAXXZ
_TEXT	SEGMENT
this$ = 224
?getFrame@nesvideo@@QEAAPEAXXZ PROC			; nesvideo::getFrame, COMDAT

; 13   : void * nesvideo::getFrame() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__A2CA72C9_nesvideo@cpp
	call	__CheckForDebuggerJustMyCode

; 14   : 	return displaybuffer;

	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax]

; 15   : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?getFrame@nesvideo@@QEAAPEAXXZ ENDP			; nesvideo::getFrame
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\nesvideo.cpp
;	COMDAT ?process_ppu_image@nesvideo@@QEAAXPEAG@Z
_TEXT	SEGMENT
x$1 = 4
pixel$2 = 36
idx$3 = 68
framepixel$4 = 100
this$ = 352
ppu_image$ = 360
?process_ppu_image@nesvideo@@QEAAXPEAG@Z PROC		; nesvideo::process_ppu_image, COMDAT

; 17   : void nesvideo::process_ppu_image(unsigned __int16 * ppu_image) {

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+392]
	lea	rcx, OFFSET FLAT:__A2CA72C9_nesvideo@cpp
	call	__CheckForDebuggerJustMyCode

; 18   : 	/*
; 19   : 		input is a buffer of 16 bits per pixel.
; 20   : 		pixel data is made up as
; 21   : 		[xxxxx]e[rgb][pppppppp]
; 22   : 		[rgb] is emphasis bits, [pppppppp] is pixel data. [xxxxx] is filler data we ignore (no need)
; 23   : 	*/
; 24   : 
; 25   : 	for (int x = 0; x < 61440; x++) {

	mov	DWORD PTR x$1[rbp], 0
	jmp	SHORT $LN4@process_pp
$LN2@process_pp:
	mov	eax, DWORD PTR x$1[rbp]
	inc	eax
	mov	DWORD PTR x$1[rbp], eax
$LN4@process_pp:
	cmp	DWORD PTR x$1[rbp], 61440		; 0000f000H
	jge	$LN3@process_pp

; 26   : 		unsigned __int8 pixel = ppu_image[x] & 0x3F;

	movsxd	rax, DWORD PTR x$1[rbp]
	mov	rcx, QWORD PTR ppu_image$[rbp]
	movzx	eax, WORD PTR [rcx+rax*2]
	and	eax, 63					; 0000003fH
	mov	BYTE PTR pixel$2[rbp], al

; 27   : 		
; 28   : 		__int32 idx = pixel * 3;

	movzx	eax, BYTE PTR pixel$2[rbp]
	imul	eax, eax, 3
	mov	DWORD PTR idx$3[rbp], eax

; 29   : 
; 30   : 		unsigned __int16 framepixel = ((ntscpalette[idx] >> 3) << 11) |
; 31   : 			((ntscpalette[idx + 1] >> 2) << 5) |

	movsxd	rax, DWORD PTR idx$3[rbp]
	lea	rcx, OFFSET FLAT:?ntscpalette@@3QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	sar	eax, 3
	shl	eax, 11
	mov	ecx, DWORD PTR idx$3[rbp]
	inc	ecx
	movsxd	rcx, ecx
	lea	rdx, OFFSET FLAT:?ntscpalette@@3QBEB
	movzx	ecx, BYTE PTR [rdx+rcx]
	sar	ecx, 2
	shl	ecx, 5
	or	eax, ecx
	mov	ecx, DWORD PTR idx$3[rbp]
	add	ecx, 2
	movsxd	rcx, ecx
	lea	rdx, OFFSET FLAT:?ntscpalette@@3QBEB
	movzx	ecx, BYTE PTR [rdx+rcx]
	sar	ecx, 3
	or	eax, ecx
	mov	WORD PTR framepixel$4[rbp], ax

; 32   : 			((ntscpalette[idx + 2] >> 3));
; 33   : 
; 34   : 		displaybuffer[x] = framepixel;

	movsxd	rax, DWORD PTR x$1[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx]
	movzx	edx, WORD PTR framepixel$4[rbp]
	mov	WORD PTR [rcx+rax*2], dx

; 35   : 	}

	jmp	$LN2@process_pp
$LN3@process_pp:

; 36   : }

	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
?process_ppu_image@nesvideo@@QEAAXPEAG@Z ENDP		; nesvideo::process_ppu_image
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\nesvideo.cpp
;	COMDAT ??1nesvideo@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1nesvideo@@QEAA@XZ PROC				; nesvideo::~nesvideo, COMDAT

; 9    : nesvideo::~nesvideo() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	mov	QWORD PTR $T1[rbp], -2
	lea	rcx, OFFSET FLAT:__A2CA72C9_nesvideo@cpp
	call	__CheckForDebuggerJustMyCode
	npad	1

; 10   : 	free(displaybuffer); // free used ram.

	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp_free
	npad	1

; 11   : }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
??1nesvideo@@QEAA@XZ ENDP				; nesvideo::~nesvideo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\nesvideo.cpp
;	COMDAT ??0nesvideo@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0nesvideo@@QEAA@XZ PROC				; nesvideo::nesvideo, COMDAT

; 5    : nesvideo::nesvideo() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__A2CA72C9_nesvideo@cpp
	call	__CheckForDebuggerJustMyCode

; 6    : 	displaybuffer = (unsigned __int16 *)malloc(122880); // buffer is 256x240 16 bits.

	mov	ecx, 122880				; 0001e000H
	call	QWORD PTR __imp_malloc
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx], rax

; 7    : }

	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0nesvideo@@QEAA@XZ ENDP				; nesvideo::nesvideo
_TEXT	ENDS
END
