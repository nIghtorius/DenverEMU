; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27050.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__FF24E80D_stdafx@h DB 01H
__84F95A01_denveremu@pch DB 01H
__122CF1B0_xstddef DB 01H
__E53366A2_utility DB 01H
__F2A749D8_streambuf DB 01H
__375B2D08_ostream DB 01H
__548B1832_istream DB 01H
__FB7583FD_xstring DB 01H
__A57BBCE6_stdio@h DB 01H
__D40DD59F_corecrt_stdio_config@h DB 01H
__5909E3A6_mapper_001@h DB 01H
__B231168F_mapper_001@cpp DB 01H
__D1FEDD45_ios DB 01H
__5B5D5F1B_wchar@h DB 01H
__BACC91DB_xlocnum DB 01H
__9B0361F4_xiosbase DB 01H
__FD5040F3_system_error DB 01H
__420D52D3_xcall_once@h DB 01H
__244BF7CC_xlocale DB 01H
__223B5856_xfacet DB 01H
__0E7E0F59_memory DB 01H
__A2E616E7_xlocinfo DB 01H
__7A53EED8_ctype@h DB 01H
__C42C8B73_vcruntime_typeinfo@h DB 01H
__F007F164_stdexcept DB 01H
__C334353D_xatomic0@h DB 01H
__1CE3C767_xmemory0 DB 01H
__CDB00636_xutility DB 01H
__7E39D651_iosfwd DB 01H
__BEFE0DB4_string@h DB 01H
__1F77EA16_corecrt_memory@h DB 01H
__7949CB39_exception DB 01H
__9BB4E194_vcruntime_exception@h DB 01H
__ACA0BEE6_malloc@h DB 01H
__5ECFF36E_type_traits DB 01H
__B2D003D7_limits DB 01H
__3736D25A_xtgmath@h DB 01H
__824D367B_cmath DB 01H
__D23EE329_cstdlib DB 01H
__AF9067BE_corecrt_math@h DB 01H
__388D9910_stdlib@h DB 01H
__6BC0FD35_vcruntime_new@h DB 01H
msvcjmc	ENDS
PUBLIC	?__empty_global_delete@@YAXPEAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_K@Z		; __empty_global_delete
PUBLIC	??0mmc1_vrom@@QEAA@XZ				; mmc1_vrom::mmc1_vrom
PUBLIC	??1mmc1_vrom@@UEAA@XZ				; mmc1_vrom::~mmc1_vrom
PUBLIC	?read@mmc1_vrom@@UEAAEHH@Z			; mmc1_vrom::read
PUBLIC	?write@mmc1_vrom@@UEAAXHHE@Z			; mmc1_vrom::write
PUBLIC	?set_rom_data@mmc1_vrom@@UEAAXPEAE_K@Z		; mmc1_vrom::set_rom_data
PUBLIC	?update_banks@mmc1_vrom@@QEAAXAEAUmmc1_state@@@Z ; mmc1_vrom::update_banks
PUBLIC	?is_ram@mmc1_vrom@@QEAAX_N@Z			; mmc1_vrom::is_ram
PUBLIC	??_Gmmc1_vrom@@UEAAPEAXI@Z			; mmc1_vrom::`scalar deleting destructor'
PUBLIC	??0mmc1_rom@@QEAA@XZ				; mmc1_rom::mmc1_rom
PUBLIC	??1mmc1_rom@@UEAA@XZ				; mmc1_rom::~mmc1_rom
PUBLIC	?read@mmc1_rom@@UEAAEHH@Z			; mmc1_rom::read
PUBLIC	?write@mmc1_rom@@UEAAXHHE@Z			; mmc1_rom::write
PUBLIC	?set_rom_data@mmc1_rom@@UEAAXPEAE_K@Z		; mmc1_rom::set_rom_data
PUBLIC	?link_vrom@mmc1_rom@@QEAAXPEAVmmc1_vrom@@@Z	; mmc1_rom::link_vrom
PUBLIC	?update_control@mmc1_rom@@QEAAXXZ		; mmc1_rom::update_control
PUBLIC	?update_banks@mmc1_rom@@QEAAXXZ			; mmc1_rom::update_banks
PUBLIC	??_Gmmc1_rom@@UEAAPEAXI@Z			; mmc1_rom::`scalar deleting destructor'
PUBLIC	__JustMyCode_Default
PUBLIC	??_7mmc1_vrom@@6B@				; mmc1_vrom::`vftable'
PUBLIC	??_7mmc1_rom@@6B@				; mmc1_rom::`vftable'
PUBLIC	??_C@_0BJ@HNFFBHJH@Denver?5MMC1?5?$CImapper?5001?$CJ@ ; `string'
PUBLIC	??_C@_0CA@OFOMHLKA@Denver?5MMC1?5?$CImapper?5001?$CJ?5?9?5VROM@ ; `string'
PUBLIC	??_R4mmc1_vrom@@6B@				; mmc1_vrom::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVmmc1_vrom@@@8				; mmc1_vrom `RTTI Type Descriptor'
PUBLIC	??_R3mmc1_vrom@@8				; mmc1_vrom::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2mmc1_vrom@@8				; mmc1_vrom::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@mmc1_vrom@@8			; mmc1_vrom::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@vrom@@8				; vrom::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVvrom@@@8				; vrom `RTTI Type Descriptor'
PUBLIC	??_R3vrom@@8					; vrom::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2vrom@@8					; vrom::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bus_device@@8			; bus_device::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVbus_device@@@8				; bus_device `RTTI Type Descriptor'
PUBLIC	??_R3bus_device@@8				; bus_device::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bus_device@@8				; bus_device::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@device@@8				; device::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVdevice@@@8				; device `RTTI Type Descriptor'
PUBLIC	??_R3device@@8					; device::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2device@@8					; device::`RTTI Base Class Array'
PUBLIC	??_R4mmc1_rom@@6B@				; mmc1_rom::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVmmc1_rom@@@8				; mmc1_rom `RTTI Type Descriptor'
PUBLIC	??_R3mmc1_rom@@8				; mmc1_rom::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2mmc1_rom@@8				; mmc1_rom::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@mmc1_rom@@8			; mmc1_rom::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@rom@@8				; rom::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVrom@@@8					; rom `RTTI Type Descriptor'
PUBLIC	??_R3rom@@8					; rom::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2rom@@8					; rom::`RTTI Base Class Array'
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	__imp_free:PROC
EXTRN	__imp_malloc:PROC
EXTRN	__imp_strcpy_s:PROC
EXTRN	?rundevice@device@@UEAAHH@Z:PROC		; device::rundevice
EXTRN	?get_device_descriptor@device@@QEAAPEADXZ:PROC	; device::get_device_descriptor
EXTRN	?dma@device@@UEAAXPEAE_N1@Z:PROC		; device::dma
EXTRN	?swappins@bus_device@@QEAAXHH@Z:PROC		; bus_device::swappins
EXTRN	?groundpin@bus_device@@QEAAXH@Z:PROC		; bus_device::groundpin
EXTRN	?resetpins_to_default@bus_device@@QEAAXXZ:PROC	; bus_device::resetpins_to_default
EXTRN	??0vrom@@QEAA@XZ:PROC				; vrom::vrom
EXTRN	??1vrom@@UEAA@XZ:PROC				; vrom::~vrom
EXTRN	??0rom@@QEAA@XZ:PROC				; rom::rom
EXTRN	??1rom@@UEAA@XZ:PROC				; rom::~rom
EXTRN	?set_rom_data@rom@@UEAAXPEAEH@Z:PROC		; rom::set_rom_data
EXTRN	??_Emmc1_vrom@@UEAAPEAXI@Z:PROC			; mmc1_vrom::`vector deleting destructor'
EXTRN	??_Emmc1_rom@@UEAAPEAXI@Z:PROC			; mmc1_rom::`vector deleting destructor'
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0mmc1_vrom@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+167
	DD	imagerel $unwind$??0mmc1_vrom@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0mmc1_vrom@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0mmc1_vrom@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0mmc1_vrom@@QEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0mmc1_vrom@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1mmc1_vrom@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+124
	DD	imagerel $unwind$??1mmc1_vrom@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?read@mmc1_vrom@@UEAAEHH@Z DD imagerel $LN5
	DD	imagerel $LN5+176
	DD	imagerel $unwind$?read@mmc1_vrom@@UEAAEHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?write@mmc1_vrom@@UEAAXHHE@Z DD imagerel $LN4
	DD	imagerel $LN4+121
	DD	imagerel $unwind$?write@mmc1_vrom@@UEAAXHHE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?set_rom_data@mmc1_vrom@@UEAAXPEAE_K@Z DD imagerel $LN3
	DD	imagerel $LN3+150
	DD	imagerel $unwind$?set_rom_data@mmc1_vrom@@UEAAXPEAE_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?update_banks@mmc1_vrom@@QEAAXAEAUmmc1_state@@@Z DD imagerel $LN15
	DD	imagerel $LN15+619
	DD	imagerel $unwind$?update_banks@mmc1_vrom@@QEAAXAEAUmmc1_state@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?is_ram@mmc1_vrom@@QEAAX_N@Z DD imagerel $LN3
	DD	imagerel $LN3+127
	DD	imagerel $unwind$?is_ram@mmc1_vrom@@QEAAX_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gmmc1_vrom@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$??_Gmmc1_vrom@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0mmc1_rom@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+167
	DD	imagerel $unwind$??0mmc1_rom@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0mmc1_rom@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0mmc1_rom@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0mmc1_rom@@QEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0mmc1_rom@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1mmc1_rom@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+124
	DD	imagerel $unwind$??1mmc1_rom@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?read@mmc1_rom@@UEAAEHH@Z DD imagerel $LN5
	DD	imagerel $LN5+212
	DD	imagerel $unwind$?read@mmc1_rom@@UEAAEHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?write@mmc1_rom@@UEAAXHHE@Z DD imagerel $LN12
	DD	imagerel $LN12+543
	DD	imagerel $unwind$?write@mmc1_rom@@UEAAXHHE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?set_rom_data@mmc1_rom@@UEAAXPEAE_K@Z DD imagerel $LN3
	DD	imagerel $LN3+185
	DD	imagerel $unwind$?set_rom_data@mmc1_rom@@UEAAXPEAE_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?link_vrom@mmc1_rom@@QEAAXPEAVmmc1_vrom@@@Z DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$?link_vrom@mmc1_rom@@QEAAXPEAVmmc1_vrom@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?update_control@mmc1_rom@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+142
	DD	imagerel $unwind$?update_control@mmc1_rom@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?update_banks@mmc1_rom@@QEAAXXZ DD imagerel $LN9
	DD	imagerel $LN9+465
	DD	imagerel $unwind$?update_banks@mmc1_rom@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gmmc1_rom@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$??_Gmmc1_rom@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R2rom@@8
rdata$r	SEGMENT
??_R2rom@@8 DD	imagerel ??_R1A@?0A@EA@rom@@8		; rom::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@bus_device@@8
	DD	imagerel ??_R1A@?0A@EA@device@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3rom@@8
rdata$r	SEGMENT
??_R3rom@@8 DD	00H					; rom::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2rom@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVrom@@@8
data$r	SEGMENT
??_R0?AVrom@@@8 DQ FLAT:??_7type_info@@6B@		; rom `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVrom@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@rom@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@rom@@8 DD imagerel ??_R0?AVrom@@@8	; rom::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3rom@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@mmc1_rom@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@mmc1_rom@@8 DD imagerel ??_R0?AVmmc1_rom@@@8 ; mmc1_rom::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3mmc1_rom@@8
rdata$r	ENDS
;	COMDAT ??_R2mmc1_rom@@8
rdata$r	SEGMENT
??_R2mmc1_rom@@8 DD imagerel ??_R1A@?0A@EA@mmc1_rom@@8	; mmc1_rom::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@rom@@8
	DD	imagerel ??_R1A@?0A@EA@bus_device@@8
	DD	imagerel ??_R1A@?0A@EA@device@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3mmc1_rom@@8
rdata$r	SEGMENT
??_R3mmc1_rom@@8 DD 00H					; mmc1_rom::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	imagerel ??_R2mmc1_rom@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVmmc1_rom@@@8
data$r	SEGMENT
??_R0?AVmmc1_rom@@@8 DQ FLAT:??_7type_info@@6B@		; mmc1_rom `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVmmc1_rom@@', 00H
data$r	ENDS
;	COMDAT ??_R4mmc1_rom@@6B@
rdata$r	SEGMENT
??_R4mmc1_rom@@6B@ DD 01H				; mmc1_rom::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVmmc1_rom@@@8
	DD	imagerel ??_R3mmc1_rom@@8
	DD	imagerel ??_R4mmc1_rom@@6B@
rdata$r	ENDS
;	COMDAT ??_R2device@@8
rdata$r	SEGMENT
??_R2device@@8 DD imagerel ??_R1A@?0A@EA@device@@8	; device::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3device@@8
rdata$r	SEGMENT
??_R3device@@8 DD 00H					; device::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2device@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdevice@@@8
data$r	SEGMENT
??_R0?AVdevice@@@8 DQ FLAT:??_7type_info@@6B@		; device `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVdevice@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@device@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@device@@8 DD imagerel ??_R0?AVdevice@@@8	; device::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3device@@8
rdata$r	ENDS
;	COMDAT ??_R2bus_device@@8
rdata$r	SEGMENT
??_R2bus_device@@8 DD imagerel ??_R1A@?0A@EA@bus_device@@8 ; bus_device::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@device@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bus_device@@8
rdata$r	SEGMENT
??_R3bus_device@@8 DD 00H				; bus_device::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2bus_device@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbus_device@@@8
data$r	SEGMENT
??_R0?AVbus_device@@@8 DQ FLAT:??_7type_info@@6B@	; bus_device `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbus_device@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bus_device@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bus_device@@8 DD imagerel ??_R0?AVbus_device@@@8 ; bus_device::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bus_device@@8
rdata$r	ENDS
;	COMDAT ??_R2vrom@@8
rdata$r	SEGMENT
??_R2vrom@@8 DD	imagerel ??_R1A@?0A@EA@vrom@@8		; vrom::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@bus_device@@8
	DD	imagerel ??_R1A@?0A@EA@device@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3vrom@@8
rdata$r	SEGMENT
??_R3vrom@@8 DD	00H					; vrom::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2vrom@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVvrom@@@8
data$r	SEGMENT
??_R0?AVvrom@@@8 DQ FLAT:??_7type_info@@6B@		; vrom `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVvrom@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@vrom@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@vrom@@8 DD imagerel ??_R0?AVvrom@@@8	; vrom::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3vrom@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@mmc1_vrom@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@mmc1_vrom@@8 DD imagerel ??_R0?AVmmc1_vrom@@@8 ; mmc1_vrom::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3mmc1_vrom@@8
rdata$r	ENDS
;	COMDAT ??_R2mmc1_vrom@@8
rdata$r	SEGMENT
??_R2mmc1_vrom@@8 DD imagerel ??_R1A@?0A@EA@mmc1_vrom@@8 ; mmc1_vrom::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@vrom@@8
	DD	imagerel ??_R1A@?0A@EA@bus_device@@8
	DD	imagerel ??_R1A@?0A@EA@device@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3mmc1_vrom@@8
rdata$r	SEGMENT
??_R3mmc1_vrom@@8 DD 00H				; mmc1_vrom::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	imagerel ??_R2mmc1_vrom@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVmmc1_vrom@@@8
data$r	SEGMENT
??_R0?AVmmc1_vrom@@@8 DQ FLAT:??_7type_info@@6B@	; mmc1_vrom `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVmmc1_vrom@@', 00H
data$r	ENDS
;	COMDAT ??_R4mmc1_vrom@@6B@
rdata$r	SEGMENT
??_R4mmc1_vrom@@6B@ DD 01H				; mmc1_vrom::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVmmc1_vrom@@@8
	DD	imagerel ??_R3mmc1_vrom@@8
	DD	imagerel ??_R4mmc1_vrom@@6B@
rdata$r	ENDS
;	COMDAT ??_C@_0CA@OFOMHLKA@Denver?5MMC1?5?$CImapper?5001?$CJ?5?9?5VROM@
CONST	SEGMENT
??_C@_0CA@OFOMHLKA@Denver?5MMC1?5?$CImapper?5001?$CJ?5?9?5VROM@ DB 'Denve'
	DB	'r MMC1 (mapper 001) - VROM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HNFFBHJH@Denver?5MMC1?5?$CImapper?5001?$CJ@
CONST	SEGMENT
??_C@_0BJ@HNFFBHJH@Denver?5MMC1?5?$CImapper?5001?$CJ@ DB 'Denver MMC1 (ma'
	DB	'pper 001)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_7mmc1_rom@@6B@
CONST	SEGMENT
??_7mmc1_rom@@6B@ DQ FLAT:??_R4mmc1_rom@@6B@		; mmc1_rom::`vftable'
	DQ	FLAT:?rundevice@device@@UEAAHH@Z
	DQ	FLAT:?dma@device@@UEAAXPEAE_N1@Z
	DQ	FLAT:??_Emmc1_rom@@UEAAPEAXI@Z
	DQ	FLAT:?write@mmc1_rom@@UEAAXHHE@Z
	DQ	FLAT:?read@mmc1_rom@@UEAAEHH@Z
	DQ	FLAT:?set_rom_data@rom@@UEAAXPEAEH@Z
	DQ	FLAT:?set_rom_data@mmc1_rom@@UEAAXPEAE_K@Z
CONST	ENDS
;	COMDAT ??_7mmc1_vrom@@6B@
CONST	SEGMENT
??_7mmc1_vrom@@6B@ DQ FLAT:??_R4mmc1_vrom@@6B@		; mmc1_vrom::`vftable'
	DQ	FLAT:?rundevice@device@@UEAAHH@Z
	DQ	FLAT:?dma@device@@UEAAXPEAE_N1@Z
	DQ	FLAT:??_Emmc1_vrom@@UEAAPEAXI@Z
	DQ	FLAT:?write@mmc1_vrom@@UEAAXHHE@Z
	DQ	FLAT:?read@mmc1_vrom@@UEAAEHH@Z
	DQ	FLAT:?set_rom_data@mmc1_vrom@@UEAAXPEAE_K@Z
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gmmc1_rom@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?update_banks@mmc1_rom@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?update_control@mmc1_rom@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?link_vrom@mmc1_rom@@QEAAXPEAVmmc1_vrom@@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?set_rom_data@mmc1_rom@@UEAAXPEAE_K@Z DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?write@mmc1_rom@@UEAAXHHE@Z DD 025053801H
	DD	011c2321H
	DD	070150021H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?read@mmc1_rom@@UEAAEHH@Z DD 025053301H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1mmc1_rom@@UEAA@XZ DD imagerel ??1mmc1_rom@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1mmc1_rom@@UEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1mmc1_rom@@UEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1mmc1_rom@@UEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1mmc1_rom@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0mmc1_rom@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0mmc1_rom@@QEAA@XZ DD imagerel ??0mmc1_rom@@QEAA@XZ
	DD	0ffffffffH
	DD	imagerel ??0mmc1_rom@@QEAA@XZ+78
	DD	00H
	DD	imagerel ??0mmc1_rom@@QEAA@XZ+150
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0mmc1_rom@@QEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0mmc1_rom@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0mmc1_rom@@QEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0mmc1_rom@@QEAA@XZ
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0mmc1_rom@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0mmc1_rom@@QEAA@XZ DD 025053511H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0mmc1_rom@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gmmc1_vrom@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?is_ram@mmc1_vrom@@QEAAX_N@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?update_banks@mmc1_vrom@@QEAAXAEAUmmc1_state@@@Z DD 025052f01H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?set_rom_data@mmc1_vrom@@UEAAXPEAE_K@Z DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?write@mmc1_vrom@@UEAAXHHE@Z DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?read@mmc1_vrom@@UEAAEHH@Z DD 025053301H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1mmc1_vrom@@UEAA@XZ DD imagerel ??1mmc1_vrom@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1mmc1_vrom@@UEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1mmc1_vrom@@UEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1mmc1_vrom@@UEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1mmc1_vrom@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0mmc1_vrom@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0mmc1_vrom@@QEAA@XZ DD imagerel ??0mmc1_vrom@@QEAA@XZ
	DD	0ffffffffH
	DD	imagerel ??0mmc1_vrom@@QEAA@XZ+78
	DD	00H
	DD	imagerel ??0mmc1_vrom@@QEAA@XZ+150
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0mmc1_vrom@@QEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0mmc1_vrom@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0mmc1_vrom@@QEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0mmc1_vrom@@QEAA@XZ
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0mmc1_vrom@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0mmc1_vrom@@QEAA@XZ DD 025053511H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0mmc1_vrom@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX_K@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX@Z DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gmmc1_rom@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gmmc1_rom@@UEAAPEAXI@Z PROC				; mmc1_rom::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	mov	rcx, QWORD PTR this$[rbp]
	call	??1mmc1_rom@@UEAA@XZ			; mmc1_rom::~mmc1_rom
	mov	eax, DWORD PTR __flags$[rbp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 136				; 00000088H
	mov	rcx, QWORD PTR this$[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??_Gmmc1_rom@@UEAAPEAXI@Z ENDP				; mmc1_rom::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\mapper_001.cpp
;	COMDAT ?update_banks@mmc1_rom@@QEAAXXZ
_TEXT	SEGMENT
bank$ = 4
tv67 = 212
this$ = 256
?update_banks@mmc1_rom@@QEAAXXZ PROC			; mmc1_rom::update_banks, COMDAT

; 32   : void mmc1_rom::update_banks() {

$LN9:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__B231168F_mapper_001@cpp
	call	__CheckForDebuggerJustMyCode

; 33   : 	int		bank = 0;

	mov	DWORD PTR bank$[rbp], 0

; 34   : 	switch (state.prg_bank_mode) {

	mov	rax, QWORD PTR this$[rbp]
	movzx	eax, BYTE PTR [rax+101]
	mov	BYTE PTR tv67[rbp], al
	cmp	BYTE PTR tv67[rbp], 0
	jb	$LN2@update_ban
	cmp	BYTE PTR tv67[rbp], 1
	jbe	SHORT $LN4@update_ban
	cmp	BYTE PTR tv67[rbp], 2
	je	SHORT $LN5@update_ban
	cmp	BYTE PTR tv67[rbp], 3
	je	$LN6@update_ban
	jmp	$LN2@update_ban
$LN4@update_ban:

; 35   : 	case MMC1_PRG_32K_MODE:
; 36   : 	case MMC1_PRG_32K_MODE2:
; 37   : 		bank = state.prgbank >> 1;

	mov	rax, QWORD PTR this$[rbp]
	movzx	eax, BYTE PTR [rax+105]
	sar	eax, 1
	mov	DWORD PTR bank$[rbp], eax

; 38   : 		prg8000 = &romdata[bank << 15];

	mov	eax, DWORD PTR bank$[rbp]
	shl	eax, 15
	cdqe
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+120], rax

; 39   : 		prgC000 = &romdata[bank << 15 | 0x4000];

	mov	eax, DWORD PTR bank$[rbp]
	shl	eax, 15
	bts	eax, 14
	cdqe
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+128], rax

; 40   : 		break;

	jmp	$LN2@update_ban
$LN5@update_ban:

; 41   : 	case MMC1_PRG_FIRSTBANK_FIX_8000:
; 42   : 		bank = state.prgbank;

	mov	rax, QWORD PTR this$[rbp]
	movzx	eax, BYTE PTR [rax+105]
	mov	DWORD PTR bank$[rbp], eax

; 43   : 		prg8000 = &romdata[0];

	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+72]
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+120], rax

; 44   : 		prgC000 = &romdata[bank << 14];

	mov	eax, DWORD PTR bank$[rbp]
	shl	eax, 14
	cdqe
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+128], rax

; 45   : 		break;

	jmp	SHORT $LN2@update_ban
$LN6@update_ban:

; 46   : 	case MMC1_PRG_LASTBANK_FIX_C000:
; 47   : 		bank = state.prgbank;

	mov	rax, QWORD PTR this$[rbp]
	movzx	eax, BYTE PTR [rax+105]
	mov	DWORD PTR bank$[rbp], eax

; 48   : 		prg8000 = &romdata[bank << 14];

	mov	eax, DWORD PTR bank$[rbp]
	shl	eax, 14
	cdqe
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+120], rax

; 49   : 		prgC000 = &romdata[romsize - 0x4000];

	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+80]
	sub	eax, 16384				; 00004000H
	cdqe
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+128], rax
$LN2@update_ban:

; 50   : 		break;
; 51   : 	}
; 52   : 	// update linked vrom too.
; 53   : 	if (charrom) charrom->update_banks(state);

	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+88], 0
	je	SHORT $LN7@update_ban
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 96					; 00000060H
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+88]
	call	?update_banks@mmc1_vrom@@QEAAXAEAUmmc1_state@@@Z ; mmc1_vrom::update_banks
$LN7@update_ban:

; 54   : }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?update_banks@mmc1_rom@@QEAAXXZ ENDP			; mmc1_rom::update_banks
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\mapper_001.cpp
;	COMDAT ?update_control@mmc1_rom@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?update_control@mmc1_rom@@QEAAXXZ PROC			; mmc1_rom::update_control, COMDAT

; 25   : void mmc1_rom::update_control() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__B231168F_mapper_001@cpp
	call	__CheckForDebuggerJustMyCode

; 26   : 	// parse control register.
; 27   : 	state.mirroring = state.control & 0x03;

	mov	rax, QWORD PTR this$[rbp]
	movzx	eax, BYTE PTR [rax+99]
	and	eax, 3
	mov	rcx, QWORD PTR this$[rbp]
	mov	BYTE PTR [rcx+100], al

; 28   : 	state.prg_bank_mode = (state.control & 0x0C) >> 2;

	mov	rax, QWORD PTR this$[rbp]
	movzx	eax, BYTE PTR [rax+99]
	and	eax, 12
	sar	eax, 2
	mov	rcx, QWORD PTR this$[rbp]
	mov	BYTE PTR [rcx+101], al

; 29   : 	state.chr_bank_mode = (state.control & 0x10) >> 4;

	mov	rax, QWORD PTR this$[rbp]
	movzx	eax, BYTE PTR [rax+99]
	and	eax, 16
	sar	eax, 4
	mov	rcx, QWORD PTR this$[rbp]
	mov	BYTE PTR [rcx+102], al

; 30   : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?update_control@mmc1_rom@@QEAAXXZ ENDP			; mmc1_rom::update_control
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\mapper_001.cpp
;	COMDAT ?link_vrom@mmc1_rom@@QEAAXPEAVmmc1_vrom@@@Z
_TEXT	SEGMENT
this$ = 224
vrom$ = 232
?link_vrom@mmc1_rom@@QEAAXPEAVmmc1_vrom@@@Z PROC	; mmc1_rom::link_vrom, COMDAT

; 115  : void mmc1_rom::link_vrom(mmc1_vrom *vrom) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__B231168F_mapper_001@cpp
	call	__CheckForDebuggerJustMyCode

; 116  : 	charrom = vrom;

	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR vrom$[rbp]
	mov	QWORD PTR [rax+88], rcx

; 117  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?link_vrom@mmc1_rom@@QEAAXPEAVmmc1_vrom@@@Z ENDP	; mmc1_rom::link_vrom
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\mapper_001.cpp
;	COMDAT ?set_rom_data@mmc1_rom@@UEAAXPEAE_K@Z
_TEXT	SEGMENT
this$ = 224
data$ = 232
size$ = 240
?set_rom_data@mmc1_rom@@UEAAXPEAE_K@Z PROC		; mmc1_rom::set_rom_data, COMDAT

; 102  : {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__B231168F_mapper_001@cpp
	call	__CheckForDebuggerJustMyCode

; 103  : 	devicestart = 0x6000;

	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+44], 24576		; 00006000H

; 104  : 	deviceend = 0xFFFF;

	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+48], 65535		; 0000ffffH

; 105  : 	devicemask = 0xFFFF;

	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+52], 65535		; 0000ffffH

; 106  : 	romdata = data;

	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	mov	QWORD PTR [rax+72], rcx

; 107  : 	romsize = (int)size;

	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR size$[rbp]
	mov	DWORD PTR [rax+80], ecx

; 108  : 
; 109  : 	// reset state is control = 0x0c
; 110  : 	state.control = 0x0c;

	mov	rax, QWORD PTR this$[rbp]
	mov	BYTE PTR [rax+99], 12

; 111  : 	update_control();

	mov	rcx, QWORD PTR this$[rbp]
	call	?update_control@mmc1_rom@@QEAAXXZ	; mmc1_rom::update_control

; 112  : 	update_banks();

	mov	rcx, QWORD PTR this$[rbp]
	call	?update_banks@mmc1_rom@@QEAAXXZ		; mmc1_rom::update_banks

; 113  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?set_rom_data@mmc1_rom@@UEAAXPEAE_K@Z ENDP		; mmc1_rom::set_rom_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\mapper_001.cpp
;	COMDAT ?write@mmc1_rom@@UEAAXHHE@Z
_TEXT	SEGMENT
function$ = 4
tv148 = 212
this$ = 256
addr$ = 264
addr_from_base$ = 272
data$ = 280
?write@mmc1_rom@@UEAAXHHE@Z PROC			; mmc1_rom::write, COMDAT

; 57   : {

$LN12:
	mov	BYTE PTR [rsp+32], r9b
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__B231168F_mapper_001@cpp
	call	__CheckForDebuggerJustMyCode

; 58   : 	if (addr < 0x8000) {

	cmp	DWORD PTR addr$[rbp], 32768		; 00008000H
	jge	SHORT $LN4@write

; 59   : 		mmc1ram[addr - 0x6000] = data;

	mov	eax, DWORD PTR addr$[rbp]
	sub	eax, 24576				; 00006000H
	cdqe
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+112]
	movzx	edx, BYTE PTR data$[rbp]
	mov	BYTE PTR [rcx+rax], dl

; 60   : 		return;

	jmp	$LN1@write
$LN4@write:

; 61   : 	}
; 62   : 	if (data & 0x80) {

	movzx	eax, BYTE PTR data$[rbp]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN5@write

; 63   : 		state.control |= 0x0C;

	mov	rax, QWORD PTR this$[rbp]
	movzx	eax, BYTE PTR [rax+99]
	or	eax, 12
	mov	rcx, QWORD PTR this$[rbp]
	mov	BYTE PTR [rcx+99], al

; 64   : 		update_control();

	mov	rcx, QWORD PTR this$[rbp]
	call	?update_control@mmc1_rom@@QEAAXXZ	; mmc1_rom::update_control

; 65   : 		update_banks();

	mov	rcx, QWORD PTR this$[rbp]
	call	?update_banks@mmc1_rom@@QEAAXXZ		; mmc1_rom::update_banks

; 66   : 		state.shift_cnt = 0x04;

	mov	rax, QWORD PTR this$[rbp]
	mov	BYTE PTR [rax+97], 4

; 67   : 		state.shift_reg = 0x00;

	mov	rax, QWORD PTR this$[rbp]
	mov	BYTE PTR [rax+96], 0

; 68   : 		return;

	jmp	$LN1@write
$LN5@write:

; 69   : 	}
; 70   : 	
; 71   : 	// fill shift register. (5 bits)
; 72   : 	state.shift_reg >>= 1;

	mov	rax, QWORD PTR this$[rbp]
	movzx	eax, BYTE PTR [rax+96]
	shr	al, 1
	mov	rcx, QWORD PTR this$[rbp]
	mov	BYTE PTR [rcx+96], al

; 73   : 	state.shift_reg |= (data & 1) << 4;

	movzx	eax, BYTE PTR data$[rbp]
	and	eax, 1
	shl	eax, 4
	mov	rcx, QWORD PTR this$[rbp]
	movzx	ecx, BYTE PTR [rcx+96]
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR this$[rbp]
	mov	BYTE PTR [rcx+96], al

; 74   : 	state.shift_cnt--;

	mov	rax, QWORD PTR this$[rbp]
	movzx	eax, BYTE PTR [rax+97]
	dec	al
	mov	rcx, QWORD PTR this$[rbp]
	mov	BYTE PTR [rcx+97], al

; 75   : 	if (state.shift_cnt != 0xFF) return;

	mov	rax, QWORD PTR this$[rbp]
	movzx	eax, BYTE PTR [rax+97]
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN6@write
	jmp	$LN1@write
$LN6@write:

; 76   : 	
; 77   : 	// shift register is filled with 5 bits, process.
; 78   : 	state.shift_cnt = 0x04;			// reset counter for the shift register again.

	mov	rax, QWORD PTR this$[rbp]
	mov	BYTE PTR [rax+97], 4

; 79   : 	int	function = (addr & 0x6000) >> 13;

	mov	eax, DWORD PTR addr$[rbp]
	and	eax, 24576				; 00006000H
	sar	eax, 13
	mov	DWORD PTR function$[rbp], eax

; 80   : 	
; 81   : 	switch (function) {

	mov	eax, DWORD PTR function$[rbp]
	mov	DWORD PTR tv148[rbp], eax
	cmp	DWORD PTR tv148[rbp], 0
	je	SHORT $LN7@write
	cmp	DWORD PTR tv148[rbp], 1
	je	SHORT $LN8@write
	cmp	DWORD PTR tv148[rbp], 2
	je	SHORT $LN9@write
	cmp	DWORD PTR tv148[rbp], 3
	je	SHORT $LN10@write
	jmp	$LN2@write
$LN7@write:

; 82   : 	case MMC1_CONTROL:
; 83   : 		state.control = state.shift_reg;

	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movzx	ecx, BYTE PTR [rcx+96]
	mov	BYTE PTR [rax+99], cl

; 84   : 		update_control();

	mov	rcx, QWORD PTR this$[rbp]
	call	?update_control@mmc1_rom@@QEAAXXZ	; mmc1_rom::update_control

; 85   : 		break;

	jmp	SHORT $LN2@write
$LN8@write:

; 86   : 	case MMC1_CHRBANK0:
; 87   : 		state.chrbank0 = state.shift_reg;

	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movzx	ecx, BYTE PTR [rcx+96]
	mov	BYTE PTR [rax+103], cl

; 88   : 		update_banks();

	mov	rcx, QWORD PTR this$[rbp]
	call	?update_banks@mmc1_rom@@QEAAXXZ		; mmc1_rom::update_banks

; 89   : 		break;

	jmp	SHORT $LN2@write
$LN9@write:

; 90   : 	case MMC1_CHRBANK1:
; 91   : 		state.chrbank1 = state.shift_reg;

	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movzx	ecx, BYTE PTR [rcx+96]
	mov	BYTE PTR [rax+104], cl

; 92   : 		update_banks();

	mov	rcx, QWORD PTR this$[rbp]
	call	?update_banks@mmc1_rom@@QEAAXXZ		; mmc1_rom::update_banks

; 93   : 		break;

	jmp	SHORT $LN2@write
$LN10@write:

; 94   : 	case MMC1_PRGBANK:
; 95   : 		state.prgbank = state.shift_reg;

	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movzx	ecx, BYTE PTR [rcx+96]
	mov	BYTE PTR [rax+105], cl

; 96   : 		update_banks();

	mov	rcx, QWORD PTR this$[rbp]
	call	?update_banks@mmc1_rom@@QEAAXXZ		; mmc1_rom::update_banks
$LN2@write:
$LN1@write:

; 97   : 		break;
; 98   : 	}	
; 99   : }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?write@mmc1_rom@@UEAAXHHE@Z ENDP			; mmc1_rom::write
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\mapper_001.cpp
;	COMDAT ?read@mmc1_rom@@UEAAEHH@Z
_TEXT	SEGMENT
this$ = 224
addr$ = 232
addr_from_base$ = 240
?read@mmc1_rom@@UEAAEHH@Z PROC				; mmc1_rom::read, COMDAT

; 19   : {

$LN5:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__B231168F_mapper_001@cpp
	call	__CheckForDebuggerJustMyCode

; 20   : 	if ((addr >= 0x6000) && (addr <= 0x7FFF)) return mmc1ram[addr - 0x6000];

	cmp	DWORD PTR addr$[rbp], 24576		; 00006000H
	jl	SHORT $LN2@read
	cmp	DWORD PTR addr$[rbp], 32767		; 00007fffH
	jg	SHORT $LN2@read
	mov	eax, DWORD PTR addr$[rbp]
	sub	eax, 24576				; 00006000H
	cdqe
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+112]
	movzx	eax, BYTE PTR [rcx+rax]
	jmp	SHORT $LN1@read
$LN2@read:

; 21   : 	if ((addr >= 0x8000) && (addr <= 0xBFFF)) return prg8000[addr - 0x8000];

	cmp	DWORD PTR addr$[rbp], 32768		; 00008000H
	jl	SHORT $LN3@read
	cmp	DWORD PTR addr$[rbp], 49151		; 0000bfffH
	jg	SHORT $LN3@read
	mov	eax, DWORD PTR addr$[rbp]
	sub	eax, 32768				; 00008000H
	cdqe
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+120]
	movzx	eax, BYTE PTR [rcx+rax]
	jmp	SHORT $LN1@read
$LN3@read:

; 22   : 	return prgC000[addr - 0xC000];

	mov	eax, DWORD PTR addr$[rbp]
	sub	eax, 49152				; 0000c000H
	cdqe
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+128]
	movzx	eax, BYTE PTR [rcx+rax]
$LN1@read:

; 23   : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?read@mmc1_rom@@UEAAEHH@Z ENDP				; mmc1_rom::read
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\mapper_001.cpp
;	COMDAT ??1mmc1_rom@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1mmc1_rom@@UEAA@XZ PROC				; mmc1_rom::~mmc1_rom, COMDAT

; 14   : mmc1_rom::~mmc1_rom() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	mov	QWORD PTR $T1[rbp], -2
	lea	rcx, OFFSET FLAT:__B231168F_mapper_001@cpp
	call	__CheckForDebuggerJustMyCode
	npad	1
	mov	rax, QWORD PTR this$[rbp]
	lea	rcx, OFFSET FLAT:??_7mmc1_rom@@6B@
	mov	QWORD PTR [rax], rcx

; 15   : 	free(mmc1ram);

	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+112]
	call	QWORD PTR __imp_free
	npad	1

; 16   : }

	mov	rcx, QWORD PTR this$[rbp]
	call	??1rom@@UEAA@XZ				; rom::~rom
	npad	1
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
??1mmc1_rom@@UEAA@XZ ENDP				; mmc1_rom::~mmc1_rom
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\mapper_001.cpp
;	COMDAT ??0mmc1_rom@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??0mmc1_rom@@QEAA@XZ PROC				; mmc1_rom::mmc1_rom, COMDAT

; 9    : mmc1_rom::mmc1_rom() {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	mov	QWORD PTR $T1[rbp], -2
	lea	rcx, OFFSET FLAT:__B231168F_mapper_001@cpp
	call	__CheckForDebuggerJustMyCode
	mov	rcx, QWORD PTR this$[rbp]
	call	??0rom@@QEAA@XZ				; rom::rom
	npad	1
	mov	rax, QWORD PTR this$[rbp]
	lea	rcx, OFFSET FLAT:??_7mmc1_rom@@6B@
	mov	QWORD PTR [rax], rcx

; 10   : 	strcpy_s(this->get_device_descriptor(), MAX_DESCRIPTOR_LENGTH, "Denver MMC1 (mapper 001)");

	mov	rcx, QWORD PTR this$[rbp]
	call	?get_device_descriptor@device@@QEAAPEADXZ ; device::get_device_descriptor
	lea	r8, OFFSET FLAT:??_C@_0BJ@HNFFBHJH@Denver?5MMC1?5?$CImapper?5001?$CJ@
	mov	edx, 128				; 00000080H
	mov	rcx, rax
	call	QWORD PTR __imp_strcpy_s

; 11   : 	mmc1ram = (char *)malloc(8192);

	mov	ecx, 8192				; 00002000H
	call	QWORD PTR __imp_malloc
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+112], rax

; 12   : }

	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
??0mmc1_rom@@QEAA@XZ ENDP				; mmc1_rom::mmc1_rom
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???0mmc1_rom@@QEAA@XZ@4HA PROC		; `mmc1_rom::mmc1_rom'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	rcx, QWORD PTR this$[rbp]
	call	??1rom@@UEAA@XZ				; rom::~rom
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???0mmc1_rom@@QEAA@XZ@4HA ENDP		; `mmc1_rom::mmc1_rom'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???0mmc1_rom@@QEAA@XZ@4HA PROC		; `mmc1_rom::mmc1_rom'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	rcx, QWORD PTR this$[rbp]
	call	??1rom@@UEAA@XZ				; rom::~rom
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???0mmc1_rom@@QEAA@XZ@4HA ENDP		; `mmc1_rom::mmc1_rom'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gmmc1_vrom@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gmmc1_vrom@@UEAAPEAXI@Z PROC				; mmc1_vrom::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	mov	rcx, QWORD PTR this$[rbp]
	call	??1mmc1_vrom@@UEAA@XZ			; mmc1_vrom::~mmc1_vrom
	mov	eax, DWORD PTR __flags$[rbp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 128				; 00000080H
	mov	rcx, QWORD PTR this$[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??_Gmmc1_vrom@@UEAAPEAXI@Z ENDP				; mmc1_vrom::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\mapper_001.cpp
;	COMDAT ?is_ram@mmc1_vrom@@QEAAX_N@Z
_TEXT	SEGMENT
this$ = 224
enable$ = 232
?is_ram@mmc1_vrom@@QEAAX_N@Z PROC			; mmc1_vrom::is_ram, COMDAT

; 190  : void mmc1_vrom::is_ram(bool enable) {

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__B231168F_mapper_001@cpp
	call	__CheckForDebuggerJustMyCode

; 191  : 	ram_mode = enable;

	mov	rax, QWORD PTR this$[rbp]
	movzx	ecx, BYTE PTR enable$[rbp]
	mov	BYTE PTR [rax+120], cl

; 192  : 	devicestart = 0x0000;

	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+44], 0

; 193  : 	deviceend = 0x1FFF;

	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+48], 8191		; 00001fffH

; 194  : 	devicemask = 0x1FFF;

	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+52], 8191		; 00001fffH

; 195  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?is_ram@mmc1_vrom@@QEAAX_N@Z ENDP			; mmc1_vrom::is_ram
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\mapper_001.cpp
;	COMDAT ?update_banks@mmc1_vrom@@QEAAXAEAUmmc1_state@@@Z
_TEXT	SEGMENT
bank$ = 4
tv183 = 212
tv72 = 212
this$ = 256
state$ = 264
?update_banks@mmc1_vrom@@QEAAXAEAUmmc1_state@@@Z PROC	; mmc1_vrom::update_banks, COMDAT

; 151  : void mmc1_vrom::update_banks(mmc1_state &state) {

$LN15:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__B231168F_mapper_001@cpp
	call	__CheckForDebuggerJustMyCode

; 152  : 	if (ppubus) {

	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+72], 0
	je	$LN6@update_ban

; 153  : 		switch (state.mirroring) {

	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, BYTE PTR [rax+4]
	mov	BYTE PTR tv72[rbp], al
	cmp	BYTE PTR tv72[rbp], 0
	je	SHORT $LN7@update_ban
	cmp	BYTE PTR tv72[rbp], 1
	je	SHORT $LN8@update_ban
	cmp	BYTE PTR tv72[rbp], 2
	je	$LN9@update_ban
	cmp	BYTE PTR tv72[rbp], 3
	je	$LN10@update_ban
	jmp	$LN2@update_ban
$LN7@update_ban:

; 154  : 		case MMC1_MIRROR_ONESCRN_LOWER:
; 155  : 			ppubus->resetpins_to_default();

	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+72]
	call	?resetpins_to_default@bus_device@@QEAAXXZ ; bus_device::resetpins_to_default

; 156  : 			ppubus->groundpin(10);

	mov	edx, 10
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+72]
	call	?groundpin@bus_device@@QEAAXH@Z		; bus_device::groundpin

; 157  : 			ppubus->groundpin(11);

	mov	edx, 11
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+72]
	call	?groundpin@bus_device@@QEAAXH@Z		; bus_device::groundpin

; 158  : 			break;

	jmp	$LN2@update_ban
$LN8@update_ban:

; 159  : 		case MMC1_MIRROR_ONESCRN_UPPER:
; 160  : 			ppubus->resetpins_to_default();

	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+72]
	call	?resetpins_to_default@bus_device@@QEAAXXZ ; bus_device::resetpins_to_default

; 161  : 			ppubus->groundpin(10);

	mov	edx, 10
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+72]
	call	?groundpin@bus_device@@QEAAXH@Z		; bus_device::groundpin

; 162  : 			ppubus->groundpin(11);

	mov	edx, 11
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+72]
	call	?groundpin@bus_device@@QEAAXH@Z		; bus_device::groundpin

; 163  : 			break;

	jmp	SHORT $LN2@update_ban
$LN9@update_ban:

; 164  : 		case MMC1_MIRROR_VERTICAL:
; 165  : 			ppubus->resetpins_to_default();

	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+72]
	call	?resetpins_to_default@bus_device@@QEAAXXZ ; bus_device::resetpins_to_default

; 166  : 			break;

	jmp	SHORT $LN2@update_ban
$LN10@update_ban:

; 167  : 		case MMC1_MIRROR_HORIZONTAL:
; 168  : 			ppubus->resetpins_to_default();

	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+72]
	call	?resetpins_to_default@bus_device@@QEAAXXZ ; bus_device::resetpins_to_default

; 169  : 			ppubus->swappins(10, 11);

	mov	r8d, 11
	mov	edx, 10
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+72]
	call	?swappins@bus_device@@QEAAXHH@Z		; bus_device::swappins

; 170  : 			ppubus->groundpin(10);

	mov	edx, 10
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+72]
	call	?groundpin@bus_device@@QEAAXH@Z		; bus_device::groundpin
$LN2@update_ban:
$LN6@update_ban:

; 171  : 			break;
; 172  : 		}
; 173  : 	}
; 174  : 	if (ram_mode) return;	// no need to switch (we are in RAM mode)

	mov	rax, QWORD PTR this$[rbp]
	movzx	eax, BYTE PTR [rax+120]
	test	eax, eax
	je	SHORT $LN11@update_ban
	jmp	$LN1@update_ban
$LN11@update_ban:

; 175  : 	int bank = 0;

	mov	DWORD PTR bank$[rbp], 0

; 176  : 	switch (state.chr_bank_mode) {

	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, BYTE PTR [rax+6]
	mov	BYTE PTR tv183[rbp], al
	cmp	BYTE PTR tv183[rbp], 0
	je	SHORT $LN12@update_ban
	cmp	BYTE PTR tv183[rbp], 1
	je	SHORT $LN13@update_ban
	jmp	$LN4@update_ban
$LN12@update_ban:

; 177  : 	case MMC1_CHR_8K_MODE:
; 178  : 		bank = state.chrbank0 >> 1;

	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, BYTE PTR [rax+7]
	sar	eax, 1
	mov	DWORD PTR bank$[rbp], eax

; 179  : 		chr0000 = &romdata[bank << 13]; // 8 kB blocks.

	mov	eax, DWORD PTR bank$[rbp]
	shl	eax, 13
	cdqe
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+80]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+96], rax

; 180  : 		chr1000 = &romdata[bank << 13 | 0x1000];

	mov	eax, DWORD PTR bank$[rbp]
	shl	eax, 13
	bts	eax, 12
	cdqe
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+80]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+104], rax

; 181  : 		break;

	jmp	SHORT $LN4@update_ban
$LN13@update_ban:

; 182  : 	case MMC1_CHR_4K_MODE:
; 183  : 		bank = state.chrbank0;

	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, BYTE PTR [rax+7]
	mov	DWORD PTR bank$[rbp], eax

; 184  : 		chr0000 = &romdata[bank << 12]; // 4kB blocks.

	mov	eax, DWORD PTR bank$[rbp]
	shl	eax, 12
	cdqe
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+80]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+96], rax

; 185  : 		bank = state.chrbank1;

	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, BYTE PTR [rax+8]
	mov	DWORD PTR bank$[rbp], eax

; 186  : 		chr1000 = &romdata[bank << 12]; // 4kB blocks.

	mov	eax, DWORD PTR bank$[rbp]
	shl	eax, 12
	cdqe
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+80]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+104], rax
$LN4@update_ban:
$LN1@update_ban:

; 187  : 		break;
; 188  : 	}
; 189  : }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?update_banks@mmc1_vrom@@QEAAXAEAUmmc1_state@@@Z ENDP	; mmc1_vrom::update_banks
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\mapper_001.cpp
;	COMDAT ?set_rom_data@mmc1_vrom@@UEAAXPEAE_K@Z
_TEXT	SEGMENT
this$ = 224
data$ = 232
size$ = 240
?set_rom_data@mmc1_vrom@@UEAAXPEAE_K@Z PROC		; mmc1_vrom::set_rom_data, COMDAT

; 143  : {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__B231168F_mapper_001@cpp
	call	__CheckForDebuggerJustMyCode

; 144  : 	devicestart = 0x0000;

	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+44], 0

; 145  : 	deviceend = 0x1FFF;

	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+48], 8191		; 00001fffH

; 146  : 	devicemask = 0x1FFF;

	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+52], 8191		; 00001fffH

; 147  : 	romdata = data;

	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	mov	QWORD PTR [rax+80], rcx

; 148  : 	romsize = (int)size;

	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR size$[rbp]
	mov	DWORD PTR [rax+88], ecx

; 149  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?set_rom_data@mmc1_vrom@@UEAAXPEAE_K@Z ENDP		; mmc1_vrom::set_rom_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\mapper_001.cpp
;	COMDAT ?write@mmc1_vrom@@UEAAXHHE@Z
_TEXT	SEGMENT
this$ = 224
addr$ = 232
addr_from_base$ = 240
data$ = 248
?write@mmc1_vrom@@UEAAXHHE@Z PROC			; mmc1_vrom::write, COMDAT

; 137  : {

$LN4:
	mov	BYTE PTR [rsp+32], r9b
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__B231168F_mapper_001@cpp
	call	__CheckForDebuggerJustMyCode

; 138  : 	// write when in RAM_MODE.
; 139  : 	if (ram_mode) ram[addr_from_base] = data;

	mov	rax, QWORD PTR this$[rbp]
	movzx	eax, BYTE PTR [rax+120]
	test	eax, eax
	je	SHORT $LN2@write
	movsxd	rax, DWORD PTR addr_from_base$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+112]
	movzx	edx, BYTE PTR data$[rbp]
	mov	BYTE PTR [rcx+rax], dl
$LN2@write:

; 140  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?write@mmc1_vrom@@UEAAXHHE@Z ENDP			; mmc1_vrom::write
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\mapper_001.cpp
;	COMDAT ?read@mmc1_vrom@@UEAAEHH@Z
_TEXT	SEGMENT
this$ = 224
addr$ = 232
addr_from_base$ = 240
?read@mmc1_vrom@@UEAAEHH@Z PROC				; mmc1_vrom::read, COMDAT

; 130  : {

$LN5:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__B231168F_mapper_001@cpp
	call	__CheckForDebuggerJustMyCode

; 131  : 	if (ram_mode) return ram[addr_from_base];

	mov	rax, QWORD PTR this$[rbp]
	movzx	eax, BYTE PTR [rax+120]
	test	eax, eax
	je	SHORT $LN2@read
	movsxd	rax, DWORD PTR addr_from_base$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+112]
	movzx	eax, BYTE PTR [rcx+rax]
	jmp	SHORT $LN1@read
$LN2@read:

; 132  : 	if (addr < 0x1000) return chr0000[addr];

	cmp	DWORD PTR addr$[rbp], 4096		; 00001000H
	jge	SHORT $LN3@read
	movsxd	rax, DWORD PTR addr$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+96]
	movzx	eax, BYTE PTR [rcx+rax]
	jmp	SHORT $LN1@read
$LN3@read:

; 133  : 	return chr1000[addr - 0x1000];

	mov	eax, DWORD PTR addr$[rbp]
	sub	eax, 4096				; 00001000H
	cdqe
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+104]
	movzx	eax, BYTE PTR [rcx+rax]
$LN1@read:

; 134  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?read@mmc1_vrom@@UEAAEHH@Z ENDP				; mmc1_vrom::read
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\mapper_001.cpp
;	COMDAT ??1mmc1_vrom@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1mmc1_vrom@@UEAA@XZ PROC				; mmc1_vrom::~mmc1_vrom, COMDAT

; 125  : mmc1_vrom::~mmc1_vrom() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	mov	QWORD PTR $T1[rbp], -2
	lea	rcx, OFFSET FLAT:__B231168F_mapper_001@cpp
	call	__CheckForDebuggerJustMyCode
	npad	1
	mov	rax, QWORD PTR this$[rbp]
	lea	rcx, OFFSET FLAT:??_7mmc1_vrom@@6B@
	mov	QWORD PTR [rax], rcx

; 126  : 	free(ram);

	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+112]
	call	QWORD PTR __imp_free
	npad	1

; 127  : }

	mov	rcx, QWORD PTR this$[rbp]
	call	??1vrom@@UEAA@XZ			; vrom::~vrom
	npad	1
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
??1mmc1_vrom@@UEAA@XZ ENDP				; mmc1_vrom::~mmc1_vrom
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\mapper_001.cpp
;	COMDAT ??0mmc1_vrom@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??0mmc1_vrom@@QEAA@XZ PROC				; mmc1_vrom::mmc1_vrom, COMDAT

; 120  : mmc1_vrom::mmc1_vrom() {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	mov	QWORD PTR $T1[rbp], -2
	lea	rcx, OFFSET FLAT:__B231168F_mapper_001@cpp
	call	__CheckForDebuggerJustMyCode
	mov	rcx, QWORD PTR this$[rbp]
	call	??0vrom@@QEAA@XZ			; vrom::vrom
	npad	1
	mov	rax, QWORD PTR this$[rbp]
	lea	rcx, OFFSET FLAT:??_7mmc1_vrom@@6B@
	mov	QWORD PTR [rax], rcx

; 121  : 	strcpy_s(this->get_device_descriptor(), MAX_DESCRIPTOR_LENGTH, "Denver MMC1 (mapper 001) - VROM");

	mov	rcx, QWORD PTR this$[rbp]
	call	?get_device_descriptor@device@@QEAAPEADXZ ; device::get_device_descriptor
	lea	r8, OFFSET FLAT:??_C@_0CA@OFOMHLKA@Denver?5MMC1?5?$CImapper?5001?$CJ?5?9?5VROM@
	mov	edx, 128				; 00000080H
	mov	rcx, rax
	call	QWORD PTR __imp_strcpy_s

; 122  : 	ram = (byte *)malloc(8192);	// reserve 8192 of RAM for MMC1 (may not be used, can be used)

	mov	ecx, 8192				; 00002000H
	call	QWORD PTR __imp_malloc
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+112], rax

; 123  : }

	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
??0mmc1_vrom@@QEAA@XZ ENDP				; mmc1_vrom::mmc1_vrom
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???0mmc1_vrom@@QEAA@XZ@4HA PROC		; `mmc1_vrom::mmc1_vrom'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	rcx, QWORD PTR this$[rbp]
	call	??1vrom@@UEAA@XZ			; vrom::~vrom
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???0mmc1_vrom@@QEAA@XZ@4HA ENDP		; `mmc1_vrom::mmc1_vrom'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???0mmc1_vrom@@QEAA@XZ@4HA PROC		; `mmc1_vrom::mmc1_vrom'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	rcx, QWORD PTR this$[rbp]
	call	??1vrom@@UEAA@XZ			; vrom::~vrom
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???0mmc1_vrom@@QEAA@XZ@4HA ENDP		; `mmc1_vrom::mmc1_vrom'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\mapper_001.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX_K@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
?__empty_global_delete@@YAXPEAX_K@Z PROC		; __empty_global_delete, COMDAT

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__B231168F_mapper_001@cpp
	call	__CheckForDebuggerJustMyCode
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?__empty_global_delete@@YAXPEAX_K@Z ENDP		; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\mapper_001.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX@Z
_TEXT	SEGMENT
__formal$ = 224
?__empty_global_delete@@YAXPEAX@Z PROC			; __empty_global_delete, COMDAT

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__B231168F_mapper_001@cpp
	call	__CheckForDebuggerJustMyCode
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?__empty_global_delete@@YAXPEAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
