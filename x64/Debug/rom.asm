; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27050.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__FF24E80D_stdafx@h DB 01H
__84F95A01_denveremu@pch DB 01H
__122CF1B0_xstddef DB 01H
__FB7583FD_xstring DB 01H
__0199DEBE_rom@h DB 01H
__68429A57_rom@cpp DB 01H
__F007F164_stdexcept DB 01H
__C334353D_xatomic0@h DB 01H
__1CE3C767_xmemory0 DB 01H
__CDB00636_xutility DB 01H
__7E39D651_iosfwd DB 01H
__BEFE0DB4_string@h DB 01H
__1F77EA16_corecrt_memory@h DB 01H
__7949CB39_exception DB 01H
__9BB4E194_vcruntime_exception@h DB 01H
__ACA0BEE6_malloc@h DB 01H
__5ECFF36E_type_traits DB 01H
__B2D003D7_limits DB 01H
__3736D25A_xtgmath@h DB 01H
__824D367B_cmath DB 01H
__D23EE329_cstdlib DB 01H
__AF9067BE_corecrt_math@h DB 01H
__388D9910_stdlib@h DB 01H
__6BC0FD35_vcruntime_new@h DB 01H
msvcjmc	ENDS
PUBLIC	??0vrom@@QEAA@XZ				; vrom::vrom
PUBLIC	??1vrom@@UEAA@XZ				; vrom::~vrom
PUBLIC	?set_rom_data@vrom@@UEAAXPEAE_K@Z		; vrom::set_rom_data
PUBLIC	?write@vrom@@UEAAXHHE@Z				; vrom::write
PUBLIC	?read@vrom@@UEAAEHH@Z				; vrom::read
PUBLIC	?link_ppu_bus@vrom@@QEAAXPEAVbus_device@@@Z	; vrom::link_ppu_bus
PUBLIC	??_Gvrom@@UEAAPEAXI@Z				; vrom::`scalar deleting destructor'
PUBLIC	??0vram@@QEAA@XZ				; vram::vram
PUBLIC	??1vram@@UEAA@XZ				; vram::~vram
PUBLIC	?write@vram@@UEAAXHHE@Z				; vram::write
PUBLIC	?read@vram@@UEAAEHH@Z				; vram::read
PUBLIC	??_Gvram@@UEAAPEAXI@Z				; vram::`scalar deleting destructor'
PUBLIC	??0rom@@QEAA@XZ					; rom::rom
PUBLIC	??1rom@@UEAA@XZ					; rom::~rom
PUBLIC	?set_rom_data@rom@@UEAAXPEAEH@Z			; rom::set_rom_data
PUBLIC	?write@rom@@UEAAXHHE@Z				; rom::write
PUBLIC	?read@rom@@UEAAEHH@Z				; rom::read
PUBLIC	??_Grom@@UEAAPEAXI@Z				; rom::`scalar deleting destructor'
PUBLIC	__JustMyCode_Default
PUBLIC	??_7vrom@@6B@					; vrom::`vftable'
PUBLIC	??_7vram@@6B@					; vram::`vftable'
PUBLIC	??_7rom@@6B@					; rom::`vftable'
PUBLIC	??_C@_0O@LOIPCCFK@NROM?50x00?5ROM@		; `string'
PUBLIC	??_C@_0P@JKKAPLGM@NROM?50x00?5VROM@		; `string'
PUBLIC	??_C@_0P@JADONGGG@NROM?50x00?5VRAM@		; `string'
PUBLIC	??_R4vrom@@6B@					; vrom::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVvrom@@@8				; vrom `RTTI Type Descriptor'
PUBLIC	??_R3vrom@@8					; vrom::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2vrom@@8					; vrom::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@vrom@@8				; vrom::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bus_device@@8			; bus_device::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVbus_device@@@8				; bus_device `RTTI Type Descriptor'
PUBLIC	??_R3bus_device@@8				; bus_device::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bus_device@@8				; bus_device::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@device@@8				; device::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVdevice@@@8				; device `RTTI Type Descriptor'
PUBLIC	??_R3device@@8					; device::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2device@@8					; device::`RTTI Base Class Array'
PUBLIC	??_R4vram@@6B@					; vram::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVvram@@@8				; vram `RTTI Type Descriptor'
PUBLIC	??_R3vram@@8					; vram::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2vram@@8					; vram::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@vram@@8				; vram::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4rom@@6B@					; rom::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVrom@@@8					; rom `RTTI Type Descriptor'
PUBLIC	??_R3rom@@8					; rom::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2rom@@8					; rom::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@rom@@8				; rom::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	__imp_free:PROC
EXTRN	__imp_malloc:PROC
EXTRN	__imp_strcpy_s:PROC
EXTRN	?rundevice@device@@UEAAHH@Z:PROC		; device::rundevice
EXTRN	?get_device_descriptor@device@@QEAAPEADXZ:PROC	; device::get_device_descriptor
EXTRN	?dma@device@@UEAAXPEAE_N1@Z:PROC		; device::dma
EXTRN	??0bus_device@@QEAA@XZ:PROC			; bus_device::bus_device
EXTRN	??1bus_device@@UEAA@XZ:PROC			; bus_device::~bus_device
EXTRN	??_Evrom@@UEAAPEAXI@Z:PROC			; vrom::`vector deleting destructor'
EXTRN	??_Evram@@UEAAPEAXI@Z:PROC			; vram::`vector deleting destructor'
EXTRN	??_Erom@@UEAAPEAXI@Z:PROC			; rom::`vector deleting destructor'
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0vrom@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+187
	DD	imagerel $unwind$??0vrom@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0vrom@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0vrom@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0vrom@@QEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0vrom@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1vrom@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+106
	DD	imagerel $unwind$??1vrom@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?set_rom_data@vrom@@UEAAXPEAE_K@Z DD imagerel $LN3
	DD	imagerel $LN3+126
	DD	imagerel $unwind$?set_rom_data@vrom@@UEAAXPEAE_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?write@vrom@@UEAAXHHE@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$?write@vrom@@UEAAXHHE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?read@vrom@@UEAAEHH@Z DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$?read@vrom@@UEAAEHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?link_ppu_bus@vrom@@QEAAXPEAVbus_device@@@Z DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$?link_ppu_bus@vrom@@QEAAXPEAVbus_device@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gvrom@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$??_Gvrom@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0vram@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+209
	DD	imagerel $unwind$??0vram@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0vram@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0vram@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0vram@@QEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0vram@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1vram@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+124
	DD	imagerel $unwind$??1vram@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?write@vram@@UEAAXHHE@Z DD imagerel $LN3
	DD	imagerel $LN3+106
	DD	imagerel $unwind$?write@vram@@UEAAXHHE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?read@vram@@UEAAEHH@Z DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$?read@vram@@UEAAEHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gvram@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$??_Gvram@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0rom@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+187
	DD	imagerel $unwind$??0rom@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0rom@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0rom@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0rom@@QEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0rom@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1rom@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+106
	DD	imagerel $unwind$??1rom@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?set_rom_data@rom@@UEAAXPEAEH@Z DD imagerel $LN5
	DD	imagerel $LN5+150
	DD	imagerel $unwind$?set_rom_data@rom@@UEAAXPEAEH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?write@rom@@UEAAXHHE@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$?write@rom@@UEAAXHHE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?read@rom@@UEAAEHH@Z DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$?read@rom@@UEAAEHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Grom@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$??_Grom@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@rom@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@rom@@8 DD imagerel ??_R0?AVrom@@@8	; rom::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3rom@@8
rdata$r	ENDS
;	COMDAT ??_R2rom@@8
rdata$r	SEGMENT
??_R2rom@@8 DD	imagerel ??_R1A@?0A@EA@rom@@8		; rom::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@bus_device@@8
	DD	imagerel ??_R1A@?0A@EA@device@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3rom@@8
rdata$r	SEGMENT
??_R3rom@@8 DD	00H					; rom::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2rom@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVrom@@@8
data$r	SEGMENT
??_R0?AVrom@@@8 DQ FLAT:??_7type_info@@6B@		; rom `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVrom@@', 00H
data$r	ENDS
;	COMDAT ??_R4rom@@6B@
rdata$r	SEGMENT
??_R4rom@@6B@ DD 01H					; rom::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVrom@@@8
	DD	imagerel ??_R3rom@@8
	DD	imagerel ??_R4rom@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@vram@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@vram@@8 DD imagerel ??_R0?AVvram@@@8	; vram::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3vram@@8
rdata$r	ENDS
;	COMDAT ??_R2vram@@8
rdata$r	SEGMENT
??_R2vram@@8 DD	imagerel ??_R1A@?0A@EA@vram@@8		; vram::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@vrom@@8
	DD	imagerel ??_R1A@?0A@EA@bus_device@@8
	DD	imagerel ??_R1A@?0A@EA@device@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3vram@@8
rdata$r	SEGMENT
??_R3vram@@8 DD	00H					; vram::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	imagerel ??_R2vram@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVvram@@@8
data$r	SEGMENT
??_R0?AVvram@@@8 DQ FLAT:??_7type_info@@6B@		; vram `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVvram@@', 00H
data$r	ENDS
;	COMDAT ??_R4vram@@6B@
rdata$r	SEGMENT
??_R4vram@@6B@ DD 01H					; vram::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVvram@@@8
	DD	imagerel ??_R3vram@@8
	DD	imagerel ??_R4vram@@6B@
rdata$r	ENDS
;	COMDAT ??_R2device@@8
rdata$r	SEGMENT
??_R2device@@8 DD imagerel ??_R1A@?0A@EA@device@@8	; device::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3device@@8
rdata$r	SEGMENT
??_R3device@@8 DD 00H					; device::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2device@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVdevice@@@8
data$r	SEGMENT
??_R0?AVdevice@@@8 DQ FLAT:??_7type_info@@6B@		; device `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVdevice@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@device@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@device@@8 DD imagerel ??_R0?AVdevice@@@8	; device::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3device@@8
rdata$r	ENDS
;	COMDAT ??_R2bus_device@@8
rdata$r	SEGMENT
??_R2bus_device@@8 DD imagerel ??_R1A@?0A@EA@bus_device@@8 ; bus_device::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@device@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bus_device@@8
rdata$r	SEGMENT
??_R3bus_device@@8 DD 00H				; bus_device::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2bus_device@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbus_device@@@8
data$r	SEGMENT
??_R0?AVbus_device@@@8 DQ FLAT:??_7type_info@@6B@	; bus_device `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbus_device@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bus_device@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bus_device@@8 DD imagerel ??_R0?AVbus_device@@@8 ; bus_device::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bus_device@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@vrom@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@vrom@@8 DD imagerel ??_R0?AVvrom@@@8	; vrom::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3vrom@@8
rdata$r	ENDS
;	COMDAT ??_R2vrom@@8
rdata$r	SEGMENT
??_R2vrom@@8 DD	imagerel ??_R1A@?0A@EA@vrom@@8		; vrom::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@bus_device@@8
	DD	imagerel ??_R1A@?0A@EA@device@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3vrom@@8
rdata$r	SEGMENT
??_R3vrom@@8 DD	00H					; vrom::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2vrom@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVvrom@@@8
data$r	SEGMENT
??_R0?AVvrom@@@8 DQ FLAT:??_7type_info@@6B@		; vrom `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVvrom@@', 00H
data$r	ENDS
;	COMDAT ??_R4vrom@@6B@
rdata$r	SEGMENT
??_R4vrom@@6B@ DD 01H					; vrom::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVvrom@@@8
	DD	imagerel ??_R3vrom@@8
	DD	imagerel ??_R4vrom@@6B@
rdata$r	ENDS
;	COMDAT ??_C@_0P@JADONGGG@NROM?50x00?5VRAM@
CONST	SEGMENT
??_C@_0P@JADONGGG@NROM?50x00?5VRAM@ DB 'NROM 0x00 VRAM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JKKAPLGM@NROM?50x00?5VROM@
CONST	SEGMENT
??_C@_0P@JKKAPLGM@NROM?50x00?5VROM@ DB 'NROM 0x00 VROM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LOIPCCFK@NROM?50x00?5ROM@
CONST	SEGMENT
??_C@_0O@LOIPCCFK@NROM?50x00?5ROM@ DB 'NROM 0x00 ROM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7rom@@6B@
CONST	SEGMENT
??_7rom@@6B@ DQ	FLAT:??_R4rom@@6B@			; rom::`vftable'
	DQ	FLAT:?rundevice@device@@UEAAHH@Z
	DQ	FLAT:?dma@device@@UEAAXPEAE_N1@Z
	DQ	FLAT:??_Erom@@UEAAPEAXI@Z
	DQ	FLAT:?write@rom@@UEAAXHHE@Z
	DQ	FLAT:?read@rom@@UEAAEHH@Z
	DQ	FLAT:?set_rom_data@rom@@UEAAXPEAEH@Z
CONST	ENDS
;	COMDAT ??_7vram@@6B@
CONST	SEGMENT
??_7vram@@6B@ DQ FLAT:??_R4vram@@6B@			; vram::`vftable'
	DQ	FLAT:?rundevice@device@@UEAAHH@Z
	DQ	FLAT:?dma@device@@UEAAXPEAE_N1@Z
	DQ	FLAT:??_Evram@@UEAAPEAXI@Z
	DQ	FLAT:?write@vram@@UEAAXHHE@Z
	DQ	FLAT:?read@vram@@UEAAEHH@Z
	DQ	FLAT:?set_rom_data@vrom@@UEAAXPEAE_K@Z
CONST	ENDS
;	COMDAT ??_7vrom@@6B@
CONST	SEGMENT
??_7vrom@@6B@ DQ FLAT:??_R4vrom@@6B@			; vrom::`vftable'
	DQ	FLAT:?rundevice@device@@UEAAHH@Z
	DQ	FLAT:?dma@device@@UEAAXPEAE_N1@Z
	DQ	FLAT:??_Evrom@@UEAAPEAXI@Z
	DQ	FLAT:?write@vrom@@UEAAXHHE@Z
	DQ	FLAT:?read@vrom@@UEAAEHH@Z
	DQ	FLAT:?set_rom_data@vrom@@UEAAXPEAE_K@Z
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Grom@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?read@rom@@UEAAEHH@Z DD 025053301H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?write@rom@@UEAAXHHE@Z DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?set_rom_data@rom@@UEAAXPEAEH@Z DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1rom@@UEAA@XZ DD imagerel ??1rom@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1rom@@UEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1rom@@UEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1rom@@UEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1rom@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0rom@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0rom@@QEAA@XZ DD imagerel ??0rom@@QEAA@XZ
	DD	0ffffffffH
	DD	imagerel ??0rom@@QEAA@XZ+78
	DD	00H
	DD	imagerel ??0rom@@QEAA@XZ+170
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0rom@@QEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0rom@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0rom@@QEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0rom@@QEAA@XZ
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0rom@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0rom@@QEAA@XZ DD 025053511H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0rom@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gvram@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?read@vram@@UEAAEHH@Z DD 025053301H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?write@vram@@UEAAXHHE@Z DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1vram@@UEAA@XZ DD imagerel ??1vram@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1vram@@UEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1vram@@UEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1vram@@UEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1vram@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0vram@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0vram@@QEAA@XZ DD imagerel ??0vram@@QEAA@XZ
	DD	0ffffffffH
	DD	imagerel ??0vram@@QEAA@XZ+78
	DD	00H
	DD	imagerel ??0vram@@QEAA@XZ+192
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0vram@@QEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0vram@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0vram@@QEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0vram@@QEAA@XZ
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0vram@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0vram@@QEAA@XZ DD 025053511H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0vram@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gvrom@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?link_ppu_bus@vrom@@QEAAXPEAVbus_device@@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?read@vrom@@UEAAEHH@Z DD 025053301H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?write@vrom@@UEAAXHHE@Z DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?set_rom_data@vrom@@UEAAXPEAE_K@Z DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1vrom@@UEAA@XZ DD imagerel ??1vrom@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1vrom@@UEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1vrom@@UEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1vrom@@UEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1vrom@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0vrom@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0vrom@@QEAA@XZ DD imagerel ??0vrom@@QEAA@XZ
	DD	0ffffffffH
	DD	imagerel ??0vrom@@QEAA@XZ+78
	DD	00H
	DD	imagerel ??0vrom@@QEAA@XZ+170
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0vrom@@QEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0vrom@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0vrom@@QEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0vrom@@QEAA@XZ
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0vrom@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0vrom@@QEAA@XZ DD 025053511H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0vrom@@QEAA@XZ
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Grom@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Grom@@UEAAPEAXI@Z PROC				; rom::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	mov	rcx, QWORD PTR this$[rbp]
	call	??1rom@@UEAA@XZ				; rom::~rom
	mov	eax, DWORD PTR __flags$[rbp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 88					; 00000058H
	mov	rcx, QWORD PTR this$[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??_Grom@@UEAAPEAXI@Z ENDP				; rom::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\rom.cpp
;	COMDAT ?read@rom@@UEAAEHH@Z
_TEXT	SEGMENT
this$ = 224
addr$ = 232
addr_from_base$ = 240
?read@rom@@UEAAEHH@Z PROC				; rom::read, COMDAT

; 28   : byte rom::read(int addr, int addr_from_base) {

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__68429A57_rom@cpp
	call	__CheckForDebuggerJustMyCode

; 29   : 	// read ROM data.
; 30   : 	return romdata[addr_from_base];

	movsxd	rax, DWORD PTR addr_from_base$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	movzx	eax, BYTE PTR [rcx+rax]

; 31   : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?read@rom@@UEAAEHH@Z ENDP				; rom::read
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\rom.cpp
;	COMDAT ?write@rom@@UEAAXHHE@Z
_TEXT	SEGMENT
this$ = 224
addr$ = 232
addr_from_base$ = 240
data$ = 248
?write@rom@@UEAAXHHE@Z PROC				; rom::write, COMDAT

; 22   : void rom::write(int addr, int addr_from_base, byte data) {

$LN3:
	mov	BYTE PTR [rsp+32], r9b
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__68429A57_rom@cpp
	call	__CheckForDebuggerJustMyCode

; 23   : 	// do actually nothing.
; 24   : 	// ROM are read only and cannot be written to.
; 25   : 	// especially ROM 0x00 -> other roms with mappers will control the mapper logic.
; 26   : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?write@rom@@UEAAXHHE@Z ENDP				; rom::write
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\rom.cpp
;	COMDAT ?set_rom_data@rom@@UEAAXPEAEH@Z
_TEXT	SEGMENT
this$ = 224
data$ = 232
size$ = 240
?set_rom_data@rom@@UEAAXPEAEH@Z PROC			; rom::set_rom_data, COMDAT

; 15   : void rom::set_rom_data(byte *data, int size) {

$LN5:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__68429A57_rom@cpp
	call	__CheckForDebuggerJustMyCode

; 16   : 	this->romdata = data;

	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	mov	QWORD PTR [rax+72], rcx

; 17   : 	this->romsize = size;

	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR size$[rbp]
	mov	DWORD PTR [rax+80], ecx

; 18   : 	// extra logic for 16kB / 32kB roms.
; 19   : 	if (size == 16384) devicemask = 0xBFFF; else devicemask = 0xFFFF;

	cmp	DWORD PTR size$[rbp], 16384		; 00004000H
	jne	SHORT $LN2@set_rom_da
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+52], 49151		; 0000bfffH
	jmp	SHORT $LN3@set_rom_da
$LN2@set_rom_da:
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+52], 65535		; 0000ffffH
$LN3@set_rom_da:

; 20   : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?set_rom_data@rom@@UEAAXPEAEH@Z ENDP			; rom::set_rom_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\rom.cpp
;	COMDAT ??1rom@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1rom@@UEAA@XZ PROC					; rom::~rom, COMDAT

; 12   : rom::~rom() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	mov	QWORD PTR $T1[rbp], -2
	lea	rcx, OFFSET FLAT:__68429A57_rom@cpp
	call	__CheckForDebuggerJustMyCode
	npad	1
	mov	rax, QWORD PTR this$[rbp]
	lea	rcx, OFFSET FLAT:??_7rom@@6B@
	mov	QWORD PTR [rax], rcx

; 13   : }

	mov	rcx, QWORD PTR this$[rbp]
	call	??1bus_device@@UEAA@XZ			; bus_device::~bus_device
	npad	1
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
??1rom@@UEAA@XZ ENDP					; rom::~rom
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\rom.cpp
;	COMDAT ??0rom@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??0rom@@QEAA@XZ PROC					; rom::rom, COMDAT

; 4    : rom::rom() {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	mov	QWORD PTR $T1[rbp], -2
	lea	rcx, OFFSET FLAT:__68429A57_rom@cpp
	call	__CheckForDebuggerJustMyCode
	mov	rcx, QWORD PTR this$[rbp]
	call	??0bus_device@@QEAA@XZ			; bus_device::bus_device
	npad	1
	mov	rax, QWORD PTR this$[rbp]
	lea	rcx, OFFSET FLAT:??_7rom@@6B@
	mov	QWORD PTR [rax], rcx

; 5    : 	// default to 16K rom with mirrored 0xC000 (to 0x8000)
; 6    : 	strcpy_s(this->get_device_descriptor(), MAX_DESCRIPTOR_LENGTH, "NROM 0x00 ROM");

	mov	rcx, QWORD PTR this$[rbp]
	call	?get_device_descriptor@device@@QEAAPEADXZ ; device::get_device_descriptor
	lea	r8, OFFSET FLAT:??_C@_0O@LOIPCCFK@NROM?50x00?5ROM@
	mov	edx, 128				; 00000080H
	mov	rcx, rax
	call	QWORD PTR __imp_strcpy_s

; 7    : 	devicestart = 0x8000;

	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+44], 32768		; 00008000H

; 8    : 	deviceend = 0xFFFF;

	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+48], 65535		; 0000ffffH

; 9    : 	devicemask = 0xBFFF;	// 1011 1111 1111 1111

	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+52], 49151		; 0000bfffH

; 10   : }

	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
??0rom@@QEAA@XZ ENDP					; rom::rom
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???0rom@@QEAA@XZ@4HA PROC			; `rom::rom'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	rcx, QWORD PTR this$[rbp]
	call	??1bus_device@@UEAA@XZ			; bus_device::~bus_device
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???0rom@@QEAA@XZ@4HA ENDP			; `rom::rom'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???0rom@@QEAA@XZ@4HA PROC			; `rom::rom'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	rcx, QWORD PTR this$[rbp]
	call	??1bus_device@@UEAA@XZ			; bus_device::~bus_device
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???0rom@@QEAA@XZ@4HA ENDP			; `rom::rom'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gvram@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gvram@@UEAAPEAXI@Z PROC				; vram::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	mov	rcx, QWORD PTR this$[rbp]
	call	??1vram@@UEAA@XZ			; vram::~vram
	mov	eax, DWORD PTR __flags$[rbp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 104				; 00000068H
	mov	rcx, QWORD PTR this$[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??_Gvram@@UEAAPEAXI@Z ENDP				; vram::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\rom.cpp
;	COMDAT ?read@vram@@UEAAEHH@Z
_TEXT	SEGMENT
this$ = 224
addr$ = 232
addr_from_base$ = 240
?read@vram@@UEAAEHH@Z PROC				; vram::read, COMDAT

; 77   : byte vram::read(int addr, int addr_from_base) {

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__68429A57_rom@cpp
	call	__CheckForDebuggerJustMyCode

; 78   : 	return ram[addr_from_base];

	movsxd	rax, DWORD PTR addr_from_base$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+96]
	movzx	eax, BYTE PTR [rcx+rax]

; 79   : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?read@vram@@UEAAEHH@Z ENDP				; vram::read
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\rom.cpp
;	COMDAT ?write@vram@@UEAAXHHE@Z
_TEXT	SEGMENT
this$ = 224
addr$ = 232
addr_from_base$ = 240
data$ = 248
?write@vram@@UEAAXHHE@Z PROC				; vram::write, COMDAT

; 73   : void vram::write(int addr, int addr_from_base, byte data) {

$LN3:
	mov	BYTE PTR [rsp+32], r9b
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__68429A57_rom@cpp
	call	__CheckForDebuggerJustMyCode

; 74   : 	ram[addr_from_base] = data;

	movsxd	rax, DWORD PTR addr_from_base$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+96]
	movzx	edx, BYTE PTR data$[rbp]
	mov	BYTE PTR [rcx+rax], dl

; 75   : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?write@vram@@UEAAXHHE@Z ENDP				; vram::write
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\rom.cpp
;	COMDAT ??1vram@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1vram@@UEAA@XZ PROC					; vram::~vram, COMDAT

; 69   : vram::~vram() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	mov	QWORD PTR $T1[rbp], -2
	lea	rcx, OFFSET FLAT:__68429A57_rom@cpp
	call	__CheckForDebuggerJustMyCode
	npad	1
	mov	rax, QWORD PTR this$[rbp]
	lea	rcx, OFFSET FLAT:??_7vram@@6B@
	mov	QWORD PTR [rax], rcx

; 70   : 	free(ram);

	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+96]
	call	QWORD PTR __imp_free
	npad	1

; 71   : }

	mov	rcx, QWORD PTR this$[rbp]
	call	??1vrom@@UEAA@XZ			; vrom::~vrom
	npad	1
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
??1vram@@UEAA@XZ ENDP					; vram::~vram
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\rom.cpp
;	COMDAT ??0vram@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??0vram@@QEAA@XZ PROC					; vram::vram, COMDAT

; 61   : vram::vram() {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	mov	QWORD PTR $T1[rbp], -2
	lea	rcx, OFFSET FLAT:__68429A57_rom@cpp
	call	__CheckForDebuggerJustMyCode
	mov	rcx, QWORD PTR this$[rbp]
	call	??0vrom@@QEAA@XZ			; vrom::vrom
	npad	1
	mov	rax, QWORD PTR this$[rbp]
	lea	rcx, OFFSET FLAT:??_7vram@@6B@
	mov	QWORD PTR [rax], rcx

; 62   : 	strcpy_s(this->get_device_descriptor(), MAX_DESCRIPTOR_LENGTH, "NROM 0x00 VRAM");

	mov	rcx, QWORD PTR this$[rbp]
	call	?get_device_descriptor@device@@QEAAPEADXZ ; device::get_device_descriptor
	lea	r8, OFFSET FLAT:??_C@_0P@JADONGGG@NROM?50x00?5VRAM@
	mov	edx, 128				; 00000080H
	mov	rcx, rax
	call	QWORD PTR __imp_strcpy_s

; 63   : 	devicestart = 0x0000;

	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+44], 0

; 64   : 	deviceend = 0x1fff;

	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+48], 8191		; 00001fffH

; 65   : 	devicemask = 0x1fff;

	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+52], 8191		; 00001fffH

; 66   : 	ram = (byte *)malloc(8192);

	mov	ecx, 8192				; 00002000H
	call	QWORD PTR __imp_malloc
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+96], rax

; 67   : }

	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
??0vram@@QEAA@XZ ENDP					; vram::vram
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???0vram@@QEAA@XZ@4HA PROC			; `vram::vram'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	rcx, QWORD PTR this$[rbp]
	call	??1vrom@@UEAA@XZ			; vrom::~vrom
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???0vram@@QEAA@XZ@4HA ENDP			; `vram::vram'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???0vram@@QEAA@XZ@4HA PROC			; `vram::vram'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	rcx, QWORD PTR this$[rbp]
	call	??1vrom@@UEAA@XZ			; vrom::~vrom
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???0vram@@QEAA@XZ@4HA ENDP			; `vram::vram'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gvrom@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gvrom@@UEAAPEAXI@Z PROC				; vrom::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	mov	rcx, QWORD PTR this$[rbp]
	call	??1vrom@@UEAA@XZ			; vrom::~vrom
	mov	eax, DWORD PTR __flags$[rbp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 96					; 00000060H
	mov	rcx, QWORD PTR this$[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??_Gvrom@@UEAAPEAXI@Z ENDP				; vrom::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\rom.cpp
;	COMDAT ?link_ppu_bus@vrom@@QEAAXPEAVbus_device@@@Z
_TEXT	SEGMENT
this$ = 224
ppu_bus$ = 232
?link_ppu_bus@vrom@@QEAAXPEAVbus_device@@@Z PROC	; vrom::link_ppu_bus, COMDAT

; 57   : void vrom::link_ppu_bus(bus_device *ppu_bus) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__68429A57_rom@cpp
	call	__CheckForDebuggerJustMyCode

; 58   : 	ppubus = ppu_bus;

	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR ppu_bus$[rbp]
	mov	QWORD PTR [rax+72], rcx

; 59   : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?link_ppu_bus@vrom@@QEAAXPEAVbus_device@@@Z ENDP	; vrom::link_ppu_bus
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\rom.cpp
;	COMDAT ?read@vrom@@UEAAEHH@Z
_TEXT	SEGMENT
this$ = 224
addr$ = 232
addr_from_base$ = 240
?read@vrom@@UEAAEHH@Z PROC				; vrom::read, COMDAT

; 53   : byte vrom::read(int addr, int addr_from_base) {

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__68429A57_rom@cpp
	call	__CheckForDebuggerJustMyCode

; 54   : 	return romdata[addr_from_base];

	movsxd	rax, DWORD PTR addr_from_base$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+80]
	movzx	eax, BYTE PTR [rcx+rax]

; 55   : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?read@vrom@@UEAAEHH@Z ENDP				; vrom::read
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\rom.cpp
;	COMDAT ?write@vrom@@UEAAXHHE@Z
_TEXT	SEGMENT
this$ = 224
addr$ = 232
addr_from_base$ = 240
data$ = 248
?write@vrom@@UEAAXHHE@Z PROC				; vrom::write, COMDAT

; 49   : void vrom::write(int addr, int addr_from_base, byte data) {

$LN3:
	mov	BYTE PTR [rsp+32], r9b
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__68429A57_rom@cpp
	call	__CheckForDebuggerJustMyCode

; 50   : 	// do nothing ROM=ROM as in read ONLY memory
; 51   : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?write@vrom@@UEAAXHHE@Z ENDP				; vrom::write
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\rom.cpp
;	COMDAT ?set_rom_data@vrom@@UEAAXPEAE_K@Z
_TEXT	SEGMENT
this$ = 224
data$ = 232
size$ = 240
?set_rom_data@vrom@@UEAAXPEAE_K@Z PROC			; vrom::set_rom_data, COMDAT

; 43   : void vrom::set_rom_data(byte *data, size_t size) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__68429A57_rom@cpp
	call	__CheckForDebuggerJustMyCode

; 44   : 	this->romdata = data;

	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	mov	QWORD PTR [rax+80], rcx

; 45   : 	this->romsize = (int)size;

	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR size$[rbp]
	mov	DWORD PTR [rax+88], ecx

; 46   : 	devicemask = ((int)size - 1);

	mov	eax, DWORD PTR size$[rbp]
	dec	eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx+52], eax

; 47   : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?set_rom_data@vrom@@UEAAXPEAE_K@Z ENDP			; vrom::set_rom_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\rom.cpp
;	COMDAT ??1vrom@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1vrom@@UEAA@XZ PROC					; vrom::~vrom, COMDAT

; 40   : vrom::~vrom() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	mov	QWORD PTR $T1[rbp], -2
	lea	rcx, OFFSET FLAT:__68429A57_rom@cpp
	call	__CheckForDebuggerJustMyCode
	npad	1
	mov	rax, QWORD PTR this$[rbp]
	lea	rcx, OFFSET FLAT:??_7vrom@@6B@
	mov	QWORD PTR [rax], rcx

; 41   : }

	mov	rcx, QWORD PTR this$[rbp]
	call	??1bus_device@@UEAA@XZ			; bus_device::~bus_device
	npad	1
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
??1vrom@@UEAA@XZ ENDP					; vrom::~vrom
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\nightorius.phibian\source\repos\denveremu\denveremu\rom.cpp
;	COMDAT ??0vrom@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??0vrom@@QEAA@XZ PROC					; vrom::vrom, COMDAT

; 33   : vrom::vrom() {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	mov	QWORD PTR $T1[rbp], -2
	lea	rcx, OFFSET FLAT:__68429A57_rom@cpp
	call	__CheckForDebuggerJustMyCode
	mov	rcx, QWORD PTR this$[rbp]
	call	??0bus_device@@QEAA@XZ			; bus_device::bus_device
	npad	1
	mov	rax, QWORD PTR this$[rbp]
	lea	rcx, OFFSET FLAT:??_7vrom@@6B@
	mov	QWORD PTR [rax], rcx

; 34   : 	strcpy_s(this->get_device_descriptor(), MAX_DESCRIPTOR_LENGTH, "NROM 0x00 VROM");

	mov	rcx, QWORD PTR this$[rbp]
	call	?get_device_descriptor@device@@QEAAPEADXZ ; device::get_device_descriptor
	lea	r8, OFFSET FLAT:??_C@_0P@JKKAPLGM@NROM?50x00?5VROM@
	mov	edx, 128				; 00000080H
	mov	rcx, rax
	call	QWORD PTR __imp_strcpy_s

; 35   : 	devicestart = 0x0000;

	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+44], 0

; 36   : 	deviceend = 0x1FFF;

	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+48], 8191		; 00001fffH

; 37   : 	devicemask = 0x1FFF;

	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+52], 8191		; 00001fffH

; 38   : }

	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
??0vrom@@QEAA@XZ ENDP					; vrom::vrom
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???0vrom@@QEAA@XZ@4HA PROC			; `vrom::vrom'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	rcx, QWORD PTR this$[rbp]
	call	??1bus_device@@UEAA@XZ			; bus_device::~bus_device
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???0vrom@@QEAA@XZ@4HA ENDP			; `vrom::vrom'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???0vrom@@QEAA@XZ@4HA PROC			; `vrom::vrom'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	rcx, QWORD PTR this$[rbp]
	call	??1bus_device@@UEAA@XZ			; bus_device::~bus_device
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???0vrom@@QEAA@XZ@4HA ENDP			; `vrom::vrom'::`1'::dtor$0
text$x	ENDS
END
